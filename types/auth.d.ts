/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/config/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Application Configuration */
        get: operations["get_application_configuration_api_v1_auth_config__client_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token/oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Login Oauth
         * @description OAuth authorization with google OAuth
         *     Flow:
         *      1. get google_client_id from api: /api/v1/auth/config/{client_id}
         *      2. build link
         *        https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={GOOGLE_CLIENT_ID}
         *       &redirect_uri={GOOGLE_REDIRECT_URI}&scope=openid%20profile%20email&access_type=offline
         *      3. Open link and take code from query string on redirect_url?code={code}
         *      4. Make this post request with code and client_id  auth: google code: {code} client_id: {client_id}
         *
         *      ** code can be used only one time
         */
        post: operations["post_login_oauth_api_v1_auth_token_oauth_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup/oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Signup Oauth
         * @description OAuth authorization with google OAuth
         *     Flow:
         *      1. get google_client_id from api: /api/v1/auth/config/{client_id}
         *      2. build link
         *        https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={GOOGLE_CLIENT_ID}
         *       &redirect_uri={GOOGLE_REDIRECT_URI}&scope=openid%20profile%20email&access_type=offline
         *      3. Open link and take code from query string on redirect_url?code={code}
         *      4. Make this post request with code and client_id  auth: google code: {code} client_id: {client_id}
         *     Sign up with your phone. Now allow make only phone signup.
         *      5. PUT complete -> create account with password and additional user info and update access_token
         *      ** code can be used only one time
         *     {'id': '105606454321963158132', 'email': 'admin@stretch.com',
         *     'verified_email': True, 'name': 'Admin Stretch',
         *     'given_name': 'Admin', 'family_name': 'Stretch',
         *     'picture': 'https://lh3.googleusercontent.com/a/ACg8ocKlULlpxANn5RzAjkmIph5WUFUCZnHnXNzTvnk4PVqx=s96-c',
         *     'locale': 'en',
         *     'hd': 'stretch.com'}
         */
        post: operations["post_signup_oauth_api_v1_auth_signup_oauth_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Token
         * @description Get token by username, phone or email and password
         *     For getting token require take client id
         *
         *     *grant_type* = password
         *     *username* = username, phone or email
         *     *scope* = not required
         *     *client_id* = required
         *     *client_secret* = required for admin access
         */
        post: operations["token_api_v1_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh For Access Token
         * @description For refresh access token need put "refresh token" to header instead access token
         *
         *     **Authorization: Bearer refresh token**
         *
         *     *refresh token probable can be updated too*
         */
        post: operations["refresh_for_access_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Complete user password reset
         * @description Complete password reset
         */
        put: operations["complete_password_reset_api_v1_auth_password_reset_put"];
        /**
         * Password reset
         * @description Password reset with your phone.
         *
         *     Flow:
         *
         *      POST /password-reset  +phone  ->  access_token and session
         *
         *      POST /verify/phone    +session -> sid  and sms sended
         *
         *      PUT /verify/phone     +sid and code -> success/error  after success (your token unlocked for password reset)
         *
         *      PUT /password-reset   +password -> new access_token and reset token
         *
         *      After set password all other sessions will drop
         */
        post: operations["password_reset_api_v1_auth_password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup
         * @description Sign up with your phone. Now allow make only phone signup.
         *
         *     Flow:
         *
         *     POST signup -> take access_token and use this token in all next requests
         *
         *     POST verify/phone -> create session request for phone verification
         *
         *     PUT verify/phone -> check session request by sid (if success your access_token unlocked for registration)
         *
         *     PUT complete -> create account with password and additional user info
         */
        post: operations["signup_api_v1_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/guest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup like guest
         * @description Sign up with your like guest.
         */
        post: operations["signup_guest_post_api_v1_auth_guest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/update/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update phone
         * @description Update your phone.
         *
         *     Flow:
         *
         *     POST update/phone -> take session for own phone
         *
         *     POST verify/phone -> create session request for phone verification  (verify own phone)
         *
         *     PUT verify/phone -> check session request by sid (if success your access_token unlocked for changing phone)
         *      (verify own phone)
         *
         *     POST update/phone -> take session for new phone
         *
         *     POST verify/phone -> create session request for phone verification  (verify new phone)
         *
         *     PUT verify/phone -> check session request by sid (if success your access_token unlocked for registration)
         *     (verify new phone)
         */
        post: operations["update_phone_request_api_v1_auth_update_phone_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/update/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update email
         * @description Update your email.
         *
         *     Flow:
         *
         *     POST update/email -> take session token and use this token in next requests
         *
         *     Open Email and click verification button
         *
         *     Open Web verification page and redirect to app.
         */
        post: operations["update_email_request_api_v1_auth_update_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Check verify phone request
         * @description Verify phone number
         *     :param data:
         *     :param user:
         *     :return:
         */
        put: operations["verify_phone_code_api_v1_auth_verify_phone_put"];
        /**
         * Create verify phone request
         * @description Verifies the newly added phone number.
         */
        post: operations["verify_phone_api_v1_auth_verify_phone_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Verify Email
         * @description Verifies if the email given is verified or not by making a comparison with the UUID code.
         */
        get: operations["check_verify_email_api_v1_auth_verify_email_get"];
        /** Check verify phone request */
        put: operations["verify_email_code_api_v1_auth_verify_email_put"];
        /**
         * Create verify email request
         * @description Sends a request to verify user's email.
         */
        post: operations["verify_email_api_v1_auth_verify_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate user registration */
        post: operations["validate_user_registration_api_v1_auth_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Complete user registration
         * @description Complete user registration
         */
        put: operations["complete_user_registration_api_v1_auth_complete_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Info */
        get: operations["get_user_info_api_v1_auth_user_get"];
        /** Put User Info */
        put: operations["put_user_info_api_v1_auth_user_put"];
        post?: never;
        /** Drop User */
        delete: operations["drop_user_api_v1_auth_user_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/user/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Properties Fields */
        get: operations["get_user_properties_fields_api_v1_auth_user_properties_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/user/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Languages */
        get: operations["get_user_languages_api_v1_auth_user_languages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/apple/{app}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Application Apple Code */
        post: operations["get_application_apple_code_api_v1_auth_apple__app__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Accommodations
         * @enum {string}
         */
        Accommodations: "apartment" | "hotel" | "flat" | "house" | "any" | "other";
        /** AppAccommodation */
        AppAccommodation: {
            /** @description Accomodation type */
            type?: components["schemas"]["Accommodations"];
            /**
             * Fields
             * @description Accomodation type
             */
            fields?: components["schemas"]["LocationFields"][];
        };
        /** AppAuthentication */
        AppAuthentication: {
            /** Googleurl */
            googleUrl?: string | null;
            /** Appleurl */
            appleUrl?: string | null;
            /** Facebookurl */
            facebookUrl?: string | null;
            /** Telegramurl */
            telegramUrl?: string | null;
        };
        /** AppConfigOut */
        AppConfigOut: {
            /** @default {
             *       "name": "Stayfit",
             *       "apiVersion": "undefined",
             *       "theme": "default"
             *     } */
            app: components["schemas"]["ApplicationInfo"];
            /** @default {} */
            authentication: components["schemas"]["AppAuthentication"];
            /** @default {} */
            settings: components["schemas"]["AppSettingsOut"];
            /** @default {
             *       "privacyPolicy": "https://stretch.com/privacy-policy/"
             *     } */
            links: components["schemas"]["AppLinks"];
            /** @default {} */
            contacts: components["schemas"]["AppContacts"];
            /** @default {
             *       "languages": [],
             *       "currencies": [],
             *       "accommodations": [
             *         {
             *           "fields": [
             *             "neighborhood",
             *             "building",
             *             "apartment"
             *           ],
             *           "type": "hotel"
             *         },
             *         {
             *           "fields": [
             *             "neighborhood",
             *             "building"
             *           ],
             *           "type": "house"
             *         },
             *         {
             *           "fields": [
             *             "neighborhood",
             *             "building",
             *             "entrance",
             *             "floor",
             *             "apartment"
             *           ],
             *           "type": "apartment"
             *         },
             *         {
             *           "fields": [
             *             "neighborhood",
             *             "building",
             *             "entrance",
             *             "floor",
             *             "apartment"
             *           ],
             *           "type": "other"
             *         }
             *       ]
             *     } */
            dictionaries: components["schemas"]["AppDictionaries"];
            /**
             * Categories
             * @default []
             */
            categories: components["schemas"]["CategoryOut"][];
            promo?: components["schemas"]["UserPromoOut"] | null;
        };
        /** AppContacts */
        AppContacts: {
            /**
             * Phone
             * @description Support's Phone number
             */
            phone?: string | null;
            /**
             * Whatsapp
             * @description Support's whatsapp
             */
            whatsapp?: string | null;
            /**
             * Email
             * @description Support's Email
             */
            email?: string | null;
            /**
             * Telegram
             * @description Support's Telegram
             */
            telegram?: string | null;
            /**
             * Viber
             * @description Support's Viber
             */
            viber?: string | null;
        };
        /** AppDictionaries */
        AppDictionaries: {
            /**
             * Languages
             * @default []
             */
            languages: components["schemas"]["UserLanguages"][] | null;
            /**
             * Currencies
             * @default []
             */
            currencies: string[] | null;
            /** Cancellationpolicy */
            cancellationPolicy?: string | null;
            /**
             * Accommodations
             * @default [
             *       {
             *         "type": "hotel",
             *         "fields": [
             *           "neighborhood",
             *           "building",
             *           "apartment"
             *         ]
             *       },
             *       {
             *         "type": "house",
             *         "fields": [
             *           "neighborhood",
             *           "building"
             *         ]
             *       },
             *       {
             *         "type": "apartment",
             *         "fields": [
             *           "neighborhood",
             *           "building",
             *           "entrance",
             *           "floor",
             *           "apartment"
             *         ]
             *       },
             *       {
             *         "type": "other",
             *         "fields": [
             *           "neighborhood",
             *           "building",
             *           "entrance",
             *           "floor",
             *           "apartment"
             *         ]
             *       }
             *     ]
             */
            accommodations: components["schemas"]["AppAccommodation"][];
        };
        /** AppLinks */
        AppLinks: {
            /**
             * Termsandconditions
             * @description url to terms and conditions
             */
            termsAndConditions?: string;
            /**
             * Contactinfo
             * @description url to contact support page
             */
            contactInfo?: string;
            /**
             * Cancellationpolicy
             * @description url to contact support page
             */
            cancellationPolicy?: string;
            /**
             * Legaldocuments
             * @description url to legal documents
             */
            legalDocuments?: string;
            /**
             * Privacypolicy
             * @description url to privacy documents
             * @default https://stretch.com/privacy-policy/
             */
            privacyPolicy: string;
            /**
             * Licensedocuments
             * @description url to license documents
             */
            licenseDocuments?: string;
            /**
             * Supportpage
             * @description url to support page
             */
            supportPage?: string;
            /**
             * Marketingpage
             * @description url to marketing page
             */
            marketingPage?: string;
        };
        /** AppSettingsOut */
        AppSettingsOut: {
            /** Country */
            country?: string | null;
            language?: components["schemas"]["UserLanguages"] | null;
            /** Currency */
            currency?: string | null;
        };
        /** ApplicationInfo */
        ApplicationInfo: {
            /**
             * Name
             * @default Stayfit
             */
            name: string | null;
            /**
             * Apiversion
             * @default undefined
             */
            apiVersion: string | null;
            /**
             * Theme
             * @default default
             */
            theme: string | null;
        };
        /** BalanceOut */
        BalanceOut: {
            /** Amount */
            amount?: number | null;
            /** Currency */
            currency?: string | null;
        };
        /** Body_token_api_v1_auth_token_post */
        Body_token_api_v1_auth_token_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** CategoryOut */
        CategoryOut: {
            /** Name */
            name?: string;
            /** Description */
            description?: string | null;
            /** Slug */
            slug?: string | null;
            /** @default business */
            type: components["schemas"]["CategoryType"] | null;
            /** Parentid */
            parentId?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Imageurl */
            imageUrl?: string | null;
            /** Count */
            count?: number | null;
            /**
             * Subcategories
             * @default []
             */
            subcategories: components["schemas"]["CategoryOut"][];
            /**
             * Attachments
             * @default []
             */
            attachments: components["schemas"]["MediaFileOut"][] | null;
        };
        /**
         * CategoryType
         * @enum {string}
         */
        CategoryType: "stretch" | "coach" | "business" | "nutrition" | "calculator";
        /**
         * CompleteIn
         * @description Finalise user registration (setup password information)
         */
        CompleteIn: {
            /**
             * @description User gender
             * @example male
             */
            gender?: components["schemas"]["UserGender"] | null;
            /**
             * Email
             * @description Email for getting bill information and etc
             */
            email?: string | null;
            /**
             * Username
             * @description Username input
             */
            username?: string | null;
            /**
             * Firstname
             * @description First name input
             */
            firstName?: string | null;
            /**
             * Lastname
             * @description Last name input
             */
            lastName?: string | null;
            /**
             * Displayname
             * @description User last name
             * @example Smith
             */
            displayName?: string | null;
            /**
             * Properties
             * @description Extra property for user
             */
            properties?: unknown[] | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Password
             * @description Save password Password
             */
            password?: string;
        };
        /** EmailCodeIn */
        EmailCodeIn: {
            /**
             * Sid
             * @description Verification sid
             */
            sid: string;
            /**
             * Code
             * @description Verification code (1 attempt)
             */
            code: number;
        };
        /** EmailCodeOut */
        EmailCodeOut: {
            /**
             * Status
             * @description Validation session status
             */
            status?: string | null;
            /** Email */
            email?: string | null;
        };
        /** EmailOut */
        EmailOut: {
            /**
             * Sid
             * @description Session session hash
             */
            sid: string;
            /**
             * Time Expire
             * @description Time expiration (seconds)
             * @default 600
             */
            time_expire: number;
            /**
             * Time Repeat
             * @description Time for allow next send (seconds)
             * @default 600
             */
            time_repeat: number;
        };
        /** EmailVerifyIn */
        EmailVerifyIn: {
            /**
             * Session
             * @description Time expiration (seconds)
             */
            session?: string;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /** Error */
            error: string;
            /** Message */
            message: string;
            /** Code */
            code: number;
        };
        /**
         * FileStatus
         * @enum {string}
         */
        FileStatus: "uploaded" | "processing" | "approved" | "rejected" | "review" | "draft" | "deleted";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LocationFields
         * @enum {string}
         */
        LocationFields: "neighborhood" | "building" | "entrance" | "floor" | "apartment";
        /** MediaFileOut */
        MediaFileOut: {
            /**
             * Contenttype
             * @description Content type of media file
             */
            contentType?: string | null;
            /**
             * Url
             * @description Full size url
             */
            url?: string | null;
            /**
             * Thumb
             * @description Thumbnail url
             */
            thumb?: string | null;
            /**
             * Videothumb
             * @description Video thumbnail url
             */
            videoThumb?: string | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["FileStatus"] | null;
            /**
             * Duration
             * @description Duration of media
             */
            duration?: number | null;
            /**
             * Originfilename
             * @description Original media filename
             */
            originFilename?: string | null;
            /**
             * Filesize
             * @description Filesize of media
             */
            filesize?: number | null;
        };
        /** MobileCodeOut */
        MobileCodeOut: {
            /**
             * Status
             * @description Validation session status
             */
            status?: string | null;
        };
        /** MobileIn */
        MobileIn: {
            /**
             * Session
             * @description Validation session hash
             */
            session?: string;
            /**
             * Channel
             * @description Channel for sending smss
             * @default sms
             */
            channel: string | null;
        };
        /** MobileInCode */
        MobileInCode: {
            /**
             * Sid
             * @description Verification sid
             */
            sid: string;
            /**
             * Code
             * @description Verification code (1 attempt)
             */
            code: string;
        };
        /** MobileOut */
        MobileOut: {
            /**
             * Sid
             * @description Session session hash
             */
            sid: string;
            /**
             * Time Expire
             * @description Time expiration OTP (seconds)
             * @default 600
             */
            time_expire: number;
            /**
             * Time Repeat
             * @description Time for allow next OTP send (seconds)
             * @default 600
             */
            time_repeat: number;
            /**
             * Redirect Url
             * @description Redirect url for telegram verification
             */
            redirect_url?: string | null;
        };
        /** OAuthLogin */
        OAuthLogin: {
            auth: components["schemas"]["OAuthType"];
            /** Code */
            code: string;
            /** Client Id */
            client_id?: string | null;
            /** Scopes */
            scopes?: string | null;
        };
        /** OAuthSignup */
        OAuthSignup: {
            auth: components["schemas"]["OAuthType"];
            /** Code */
            code: string;
            /** Client Id */
            client_id?: string | null;
            /** Scopes */
            scopes?: string | null;
            type?: components["schemas"]["UserType"] | null;
        };
        /**
         * OAuthType
         * @enum {string}
         */
        OAuthType: "apple" | "google" | "facebook";
        /**
         * PasswordIn
         * @description Finalise password setup
         */
        PasswordIn: {
            /**
             * Oldpassword
             * @description Old password needed for replace only
             */
            oldPassword?: string | null;
            /**
             * Password
             * @description Save password Password
             */
            password: string;
        };
        /** ProfileFilling */
        ProfileFilling: {
            /** Allownonverify */
            allowNonVerify?: boolean | null;
            /** Availability */
            availability?: boolean | null;
            /** Avatar */
            avatar?: boolean | null;
            /** Certificates */
            certificates?: boolean | null;
            /** Description */
            description?: boolean | null;
            /** Experience */
            experience?: boolean | null;
            /** Images */
            images?: boolean | null;
            /** Languages */
            languages?: boolean | null;
            /** Locations */
            locations?: boolean | null;
            /** Media */
            media?: boolean | null;
            /** Services */
            services?: boolean | null;
            /** Faqs */
            faqs?: boolean | null;
            /**
             * Percentage
             * @default 0
             */
            percentage: number | null;
        };
        /** StretchResponse */
        StretchResponse: {
            /**
             * Status
             * @description Stretch status response
             * @default success
             */
            status: string;
        };
        /**
         * StripeConnectStatus
         * @enum {string}
         */
        StripeConnectStatus: "unregistered" | "completed" | "pending" | "unverified";
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Access Expire */
            access_expire: number;
            /** Refresh Expire */
            refresh_expire: number;
            /** Scopes */
            scopes?: string | null;
        };
        /**
         * UserAllergy
         * @enum {string}
         */
        UserAllergy: "none" | "cat" | "dog" | "all";
        /** UserDataValidateField */
        UserDataValidateField: {
            /** Error */
            error: string;
            /** Message */
            message: string;
            /** Field */
            field: string;
        };
        /**
         * UserDataValidateIn
         * @description Finalise user registration (setup password information)
         */
        UserDataValidateIn: {
            /**
             * Email
             * @description Email for getting bill information and etc
             */
            email?: string | null;
            /**
             * Username
             * @description Username input
             */
            username?: string | null;
            /**
             * Firstname
             * @description First name input
             */
            firstName?: string | null;
            /**
             * Lastname
             * @description Last name input
             */
            lastName?: string | null;
        };
        /**
         * UserDataValidateOut
         * @description Validated User
         */
        UserDataValidateOut: {
            /** Message */
            message: string;
            /** Error */
            error: string;
            /** Fields */
            fields: components["schemas"]["UserDataValidateField"][];
        };
        /**
         * UserGender
         * @enum {string}
         */
        UserGender: "male" | "female" | "transman" | "transwoman";
        /**
         * UserLanguages
         * @enum {string}
         */
        UserLanguages: "ab" | "aa" | "af" | "ak" | "sq" | "am" | "ar" | "an" | "hy" | "as" | "av" | "ae" | "ay" | "az" | "bm" | "ba" | "eu" | "be" | "bn" | "bh" | "bi" | "bs" | "br" | "bg" | "my" | "ca" | "ch" | "ce" | "ny" | "zh" | "cv" | "kw" | "co" | "cr" | "hr" | "cs" | "da" | "dv" | "nl" | "dz" | "en" | "eo" | "et" | "ee" | "fo" | "fj" | "fi" | "fr" | "ff" | "gl" | "ka" | "de" | "el" | "gn" | "gu" | "ht" | "ha" | "he" | "hz" | "hi" | "ho" | "hu" | "ia" | "id" | "ie" | "ga" | "ig" | "ik" | "io" | "is" | "it" | "iu" | "ja" | "jv" | "kl" | "kn" | "kr" | "ks" | "kk" | "km" | "ki" | "rw" | "ky" | "kv" | "kg" | "ko" | "ku" | "kj" | "la" | "lb" | "lg" | "li" | "ln" | "lo" | "lt" | "lu" | "lv" | "gv" | "mk" | "mg" | "ms" | "ml" | "mt" | "mi" | "mr" | "mh" | "mn" | "na" | "nv" | "nd" | "ne" | "ng" | "nb" | "nn" | "no" | "ii" | "nr" | "oc" | "oj" | "cu" | "om" | "or" | "os" | "pa" | "pi" | "fa" | "pl" | "ps" | "pt" | "qu" | "rm" | "rn" | "ro" | "ru" | "sa" | "sc" | "sd" | "se" | "sm" | "sg" | "sr" | "gd" | "sn" | "si" | "sk" | "sl" | "so" | "st" | "es" | "su" | "sw" | "ss" | "sv" | "ta" | "te" | "tg" | "th" | "ti" | "bo" | "tk" | "tl" | "tn" | "to" | "tr" | "ts" | "tt" | "tw" | "ty" | "ug" | "uk" | "ur" | "uz" | "ve" | "vi" | "vo" | "wa" | "cy" | "wo" | "fy" | "xh" | "yi" | "yo" | "za" | "zu";
        /**
         * UserProfileIn
         * @description Update user profile
         */
        UserProfileIn: {
            /**
             * @description User gender
             * @example male
             */
            gender?: components["schemas"]["UserGender"] | null;
            /**
             * Birthdate
             * @description User Birth date
             * @example 2000-07-08
             */
            birthDate?: string | null;
            /**
             * Timezone
             * @description Default timezone for user
             * @example Asia/Dubai
             */
            timezone?: string | null;
            /**
             * Email
             * @description Email for getting bill information and etc
             */
            email?: string | null;
            /**
             * Username
             * @description Username input
             */
            username?: string | null;
            /**
             * Firstname
             * @description First name input
             */
            firstName?: string | null;
            /**
             * Lastname
             * @description Last name input
             */
            lastName?: string | null;
            /**
             * Displayname
             * @description User last name
             * @example Smith
             */
            displayName?: string | null;
            /**
             * Properties
             * @description Extra property for user
             */
            properties?: unknown[] | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Password
             * @description Save password Password
             */
            password?: string;
            /**
             * Description
             * @description About
             */
            description?: string | null;
            /**
             * Languages
             * @description Languages
             */
            languages?: {
                [key: string]: string | undefined;
            } | components["schemas"]["UserLanguages"][] | null;
            allergy?: components["schemas"]["UserAllergy"] | null;
            /**
             * Allownonverify
             * @description User verification
             */
            allowNonVerify?: boolean | null;
            /**
             * Experience
             * @description Experience in years
             * @example 3
             */
            experience?: number | null;
            /**
             * Requiresparking
             * @description Requires parking
             * @example false
             */
            requiresParking?: boolean | null;
            /**
             * Publicviewallowed
             * @description client only, allow clients to view profile?
             * @example false
             */
            publicViewAllowed?: boolean | null;
        };
        /** UserProfileOut */
        UserProfileOut: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Displayname
             * @description User display name
             * @example Smith
             */
            displayName?: string | null;
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /** Avatarurl */
            avatarUrl?: string | null;
            type: components["schemas"]["UserType"];
            /** Rating */
            rating?: number | null;
            /**
             * Reviewscount
             * @description Number of reviews
             * @default 0
             */
            reviewsCount: number | null;
            /** Sessionscount */
            sessionsCount?: number | null;
            /**
             * Registrationdate
             * @description User registration date
             */
            registrationDate?: string | null;
            /** Verified */
            verified?: boolean | null;
            /**
             * Experience
             * @description User experience
             */
            experience?: number | null;
            allergy?: components["schemas"]["UserAllergy"] | null;
            /** Allownonverify */
            allowNonVerify?: boolean | null;
            /**
             * @description User gender
             * @example male
             */
            gender?: components["schemas"]["UserGender"] | null;
            /**
             * Avatartype
             * @description Avatar type of banner picture
             */
            avatarType?: string | null;
            /** Avatarimageurl */
            avatarImageUrl?: string | null;
            /** Mediatype */
            mediaType?: string | null;
            /** Mediaurl */
            mediaUrl?: string | null;
            /** Mediapreviewurl */
            mediaPreviewUrl?: string | null;
            /**
             * Description
             * @description About
             */
            description?: string | null;
            /**
             * Languages
             * @description Languages
             */
            languages: string | {
                [key: string]: string | undefined;
            } | null;
            /**
             * Properties
             * @description Extra property for user
             */
            properties?: components["schemas"]["UserPropOut"][] | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Whatsapp
             * @description Whatsapp  number in international format
             * @example +97100000000
             */
            whatsapp?: string | null;
            /** @description KYC verification */
            kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
            /** Chaturl */
            chatUrl?: string | null;
            /**
             * Blocked
             * @default false
             */
            blocked: boolean;
            /**
             * Username
             * @description Username input
             */
            username?: string | null;
            /**
             * Email
             * @description Email format
             * @example info@stretch.com
             */
            email?: string | null;
            /**
             * Timezone
             * @description Default timezone for user
             * @example Asia/Dubai
             */
            timezone?: string | null;
            /**
             * Birthdate
             * @description User Birth date
             * @example 2000-07-08
             */
            birthDate?: string | null;
            /** @description User balance */
            balance?: components["schemas"]["BalanceOut"] | null;
            /**
             * Verifiedphone
             * @description Phone verification
             */
            verifiedPhone?: boolean | null;
            /**
             * Verifiedemail
             * @description Email verification
             */
            verifiedEmail?: boolean | null;
            /**
             * Available
             * @description Availability
             */
            available?: boolean | null;
            /** Verifycode */
            verifyCode?: string | null;
            /**
             * Totalpayment
             * @description Total payment amount
             */
            totalPayment?: number | null;
            /**
             * Totalpaymentcurrency
             * @description Payment currency
             */
            totalPaymentCurrency?: string | null;
            /**
             * Publicviewallowed
             * @description client only, allow clients to view profile?
             * @example false
             */
            publicViewAllowed?: boolean | null;
            /** @description Profile picture completion status */
            profileCompletion?: components["schemas"]["ProfileFilling"] | null;
            /**
             * Sbaccesstoken
             * @description Access token for sendbird registration
             */
            sbAccessToken?: string | null;
        };
        /** UserPromoOut */
        UserPromoOut: {
            /** Price */
            price: number;
            /** Message */
            message: string;
            /** @default boosted */
            type: components["schemas"]["UserPromoType"] | null;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean | null;
            /** Startdate */
            startDate?: string | null;
            /** Expirydate */
            expiryDate?: string | null;
        };
        /**
         * UserPromoType
         * @constant
         */
        UserPromoType: "boosted";
        /** UserPropOut */
        UserPropOut: {
            /** Name */
            name: string;
            /** Value */
            value?: string | number | boolean | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Type */
            type: string | null;
            /** Options */
            options?: {
                [key: string]: string | undefined;
            } | null;
        };
        /** UserPropertyFieldOut */
        UserPropertyFieldOut: {
            /** Name */
            name?: string;
            type?: components["schemas"]["UserPropertyType"];
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Default */
            default?: unknown | null;
            /** Options */
            options?: {
                [key: string]: string | undefined;
            } | null;
        };
        /**
         * UserPropertyType
         * @enum {string}
         */
        UserPropertyType: "empty" | "id" | "int" | "bool" | "float" | "str" | "list" | "dict" | "select" | "radio" | "datetime";
        /** UserResetPasswordIn */
        UserResetPasswordIn: {
            /**
             * Grant Type
             * @example reset
             */
            grant_type: string;
            /**
             * Client Id
             * @example 2f9445b3-5266-45cd-8a85-d5c3fff69781
             */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            /** Scope */
            scope?: string | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Email
             * @description Validated email address
             * @example user@stretch.com
             */
            email?: string | null;
            /**
             * @description Type of signup user: client, coach, studio
             * @example client
             */
            type?: components["schemas"]["UserType"] | null;
        };
        /** UserSignupGuestIn */
        UserSignupGuestIn: {
            /**
             * Grant Type
             * @example create
             */
            grant_type: string;
            /**
             * Client Id
             * @example 2f9445b3-5266-45cd-8a85-d5c3fff69781
             */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            /** Scope */
            scope?: string | null;
            /**
             * Timezone
             * @description Default timezone for user
             * @example Asia/Dubai
             */
            timezone?: string | null;
        };
        /** UserSignupIn */
        UserSignupIn: {
            /**
             * Grant Type
             * @example create
             */
            grant_type: string;
            /**
             * Client Id
             * @example 2f9445b3-5266-45cd-8a85-d5c3fff69781
             */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            /**
             * @description Type of signup user: client, coach, studio
             * @example client
             */
            scope?: components["schemas"]["UserType"] | null;
            /**
             * Timezone
             * @description Default timezone for user
             * @example Asia/Dubai
             */
            timezone?: string | null;
            /**
             * Email
             * @description Email format
             * @example info@stretch.com
             */
            email?: string | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * @description Type of signup user: client, coach, studio
             * @example client
             */
            type?: components["schemas"]["UserType"] | null;
        };
        /** UserSignupOut */
        UserSignupOut: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Access Expire */
            access_expire: number;
            /** Refresh Expire */
            refresh_expire: number;
            /** Scopes */
            scopes?: string | null;
            /** @description Type of signup user: client, coach, studio */
            type?: components["schemas"]["UserType"] | null;
            /**
             * Session
             * @description Validation session hash
             */
            session?: string | null;
            /**
             * First Name
             * @description First name
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Last name
             */
            last_name?: string | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Email
             * @description Email format
             * @example info@stretch.com
             */
            email?: string | null;
        };
        /**
         * UserType
         * @enum {string}
         */
        UserType: "guest" | "coach" | "client" | "studio" | "business" | "support" | "admin";
        /** UserUpdateEmailIn */
        UserUpdateEmailIn: {
            /**
             * Email
             * Format: email
             * @description Email format
             * @example info@stretch.com
             */
            email: string;
        };
        /** UserUpdateEmailOut */
        UserUpdateEmailOut: {
            /** @description Type of signup user: client, coach, studio */
            type?: components["schemas"]["UserType"] | null;
            /**
             * Session
             * @description Validation session hash
             */
            session?: string | null;
            /**
             * Email
             * Format: email
             * @description Email format
             * @example info@stretch.com
             */
            email: string;
            /**
             * Verifedemail
             * @description Email verification
             */
            verifedEmail: boolean;
        };
        /** UserUpdatePhoneIn */
        UserUpdatePhoneIn: {
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone: string;
        };
        /** UserUpdatePhoneOut */
        UserUpdatePhoneOut: {
            /** @description Type of signup user: client, coach, studio */
            type?: components["schemas"]["UserType"] | null;
            /**
             * Session
             * @description Validation session hash
             */
            session?: string | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone: string;
            /**
             * Verifedphone
             * @description Phone verification
             */
            verifedPhone: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_application_configuration_api_v1_auth_config__client_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 2f9445b3-5266-45cd-8a85-d5c3fff69781 */
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppConfigOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_login_oauth_api_v1_auth_token_oauth_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_signup_oauth_api_v1_auth_signup_oauth_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthSignup"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSignupOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    token_api_v1_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_token_api_v1_auth_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Bad Request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_for_access_token_api_v1_auth_refresh_post: {
        parameters: {
            query?: {
                cookie?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Bad Request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    complete_password_reset_api_v1_auth_password_reset_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    password_reset_api_v1_auth_password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserResetPasswordIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSignupOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_api_v1_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignupIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSignupOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_guest_post_api_v1_auth_guest_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignupGuestIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSignupOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_phone_request_api_v1_auth_update_phone_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdatePhoneIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserUpdatePhoneOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_email_request_api_v1_auth_update_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateEmailIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserUpdateEmailOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_phone_code_api_v1_auth_verify_phone_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MobileInCode"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MobileCodeOut"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_phone_api_v1_auth_verify_phone_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MobileIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MobileOut"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad Request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_verify_email_api_v1_auth_verify_email_get: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_email_code_api_v1_auth_verify_email_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailCodeIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailCodeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_email_api_v1_auth_verify_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerifyIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailOut"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_user_registration_api_v1_auth_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDataValidateIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDataValidateOut"];
                };
            };
        };
    };
    complete_user_registration_api_v1_auth_complete_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"] | components["schemas"]["StretchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_info_api_v1_auth_user_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
        };
    };
    put_user_info_api_v1_auth_user_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    drop_user_api_v1_auth_user_delete: {
        parameters: {
            query?: {
                reason?: string | null;
                description?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_properties_fields_api_v1_auth_user_properties_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPropertyFieldOut"][];
                };
            };
        };
    };
    get_user_languages_api_v1_auth_user_languages_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
    };
    get_application_apple_code_api_v1_auth_apple__app__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example client */
                app: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
