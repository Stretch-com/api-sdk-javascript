/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/search": {
    /** Adv Search Coach Services */
    post: operations["adv_search_coach_services_api_v1_search_post"];
  };
  "/api/v1/search/count": {
    /** Adv Search Coach Counts */
    post: operations["adv_search_coach_counts_api_v1_search_count_post"];
  };
  "/api/v1/search/filter": {
    /**
     * Search Coach Filter
     * @description Filters out the coach information using the search query made by the user.
     */
    get: operations["search_coach_filter_api_v1_search_filter_get"];
  };
  "/api/v1/servicetypes": {
    /**
     * Get Service Types
     * @description Gets the type of service or the category of a chosen service.
     */
    get: operations["get_service_types_api_v1_servicetypes_get"];
  };
  "/api/v1/service/{service_id}/availability": {
    /**
     * Get Availability Service
     * @description Gets the available time in UTC for some service
     * for a given client and returns the details for all available service and
     * uses the following parameters:
     *
     * - service_id *required
     * - address_id *optional
     * - lat, lng *optional
     * - from_date *optional
     * - to_date *optional
     */
    post: operations["get_availability_service_api_v1_service__service_id__availability_post"];
  };
  "/api/v1/service/{service_id}/check": {
    /**
     * Check Booking Sessions
     * @description Creates a service session using the session id and data to store a description about the session.
     * The date and time of the session is also taken into consideration and displayed as a final result.
     */
    post: operations["check_booking_sessions_api_v1_service__service_id__check_post"];
  };
  "/api/v1/service/{service_id}": {
    /** Get Service */
    get: operations["get_service_api_v1_service__service_id__get"];
    /**
     * Create Booking Sessions
     * @description Creates a service session using the session id and data to store a description about the session.
     * The date and time of the session is also taken into consideration and displayed as a final result.
     */
    post: operations["create_booking_sessions_api_v1_service__service_id__post"];
  };
  "/api/v1/service/{service_id}/reviews": {
    /** Service Reviews */
    get: operations["service_reviews_api_v1_service__service_id__reviews_get"];
  };
  "/api/v1/service/{service_id}/reviews/info": {
    /** Service Reviews Info */
    get: operations["service_reviews_info_api_v1_service__service_id__reviews_info_get"];
  };
  "/api/v1/sessions/info": {
    /**
     * Get Sessions Info
     * @description Displays the full description of the session.
     * :param user:
     * :return:
     */
    get: operations["get_sessions_info_api_v1_sessions_info_get"];
  };
  "/api/v1/sessions/unrated": {
    /**
     * Get Sessions Unrated
     * @description Gets all the session which haven't been rated yet.
     */
    get: operations["get_sessions_unrated_api_v1_sessions_unrated_get"];
  };
  "/api/v1/sessions/coaches": {
    /** Get Sessions Coaches */
    get: operations["get_sessions_coaches_api_v1_sessions_coaches_get"];
  };
  "/api/v1/sessions": {
    /**
     * Get Sessions
     * @description Returns the complete information stored for all sessions.
     */
    get: operations["get_sessions_api_v1_sessions_get"];
  };
  "/api/v1/session/{session_id}": {
    /**
     * Get Session
     * @description Gets a description for a single session.
     */
    get: operations["get_session_api_v1_session__session_id__get"];
    /**
     * Update Sessions
     * @description Update the session using the new details being input by the user.
     */
    put: operations["update_sessions_api_v1_session__session_id__put"];
  };
  "/api/v1/sessions/clients": {
    /** Get Sessions Clients */
    get: operations["get_sessions_clients_api_v1_sessions_clients_get"];
  };
  "/api/v1/session/{session_id}/approve": {
    /**
     * Session Approve
     * @description Coach can approve the session to indicate that session is valid and is ready for booking.
     */
    put: operations["session_approve_api_v1_session__session_id__approve_put"];
  };
  "/api/v1/session/{session_id}/cancel": {
    /**
     * Session Cancel
     * @description Cancels the appointment for a given session.
     */
    put: operations["session_cancel_api_v1_session__session_id__cancel_put"];
  };
  "/api/v1/session/{session_id}/report": {
    /**
     * Session Report
     * @description Displays a message about the status of the session.
     */
    put: operations["session_report_api_v1_session__session_id__report_put"];
  };
  "/api/v1/session/{session_id}/refund": {
    /** Session Refund */
    put: operations["session_refund_api_v1_session__session_id__refund_put"];
  };
  "/api/v1/session/{session_id}/decline": {
    /** Session Decline */
    put: operations["session_decline_api_v1_session__session_id__decline_put"];
  };
  "/api/v1/session/{session_id}/reviews": {
    /**
     * Session Reviews
     * @description Displays all the reviews given for the current session along with the message, created at and rating value.
     */
    get: operations["session_reviews_api_v1_session__session_id__reviews_get"];
  };
  "/api/v1/session/{session_id}/review": {
    /**
     * Create Session Review
     * @description Creates a single review for the given session.
     */
    post: operations["create_session_review_api_v1_session__session_id__review_post"];
  };
  "/api/v1/session/review/{review_id}": {
    /**
     * Get Review
     * @description Creates a single review for the given session.
     */
    get: operations["get_review_api_v1_session_review__review_id__get"];
    /**
     * Create Thread Review
     * @description Creates a single review for the given session.
     */
    post: operations["create_thread_review_api_v1_session_review__review_id__post"];
    /**
     * Delete Review Or Thread
     * @description Deletes the user session review upon confirmation.
     */
    delete: operations["delete_review_or_thread_api_v1_session_review__review_id__delete"];
  };
  "/api/v1/session/{session_id}/ics": {
    /**
     * Get Session Ics
     * @description Gets the session event in a calendar form of view.
     */
    get: operations["get_session_ics_api_v1_session__session_id__ics_get"];
  };
  "/api/v1/session/group/{group_id}/cancel": {
    /** Cancel Session Group */
    put: operations["cancel_session_group_api_v1_session_group__group_id__cancel_put"];
  };
  "/api/v1/user/favorites": {
    /**
     * Get Favorites
     * @description Get list of favorites user connect with You account
     * Return SearchOut result for favorite coaches
     */
    get: operations["get_favorites_api_v1_user_favorites_get"];
  };
  "/api/v1/user/favorite": {
    /**
     * Add Favorite
     * @description Add new favorite user. If user already added response also success
     */
    post: operations["add_favorite_api_v1_user_favorite_post"];
  };
  "/api/v1/user/favorite/{user_id}": {
    /**
     * Delete Favorite
     * @description Add remove favorite user by id. If user already add return also success
     */
    delete: operations["delete_favorite_api_v1_user_favorite__user_id__delete"];
  };
  "/api/v1/user/blacklist": {
    /** Get Blocked Users */
    get: operations["get_blocked_users_api_v1_user_blacklist_get"];
    /**
     * Add User To Blacklist
     * @description Add new favorite user. If user already added response also success
     */
    post: operations["add_user_to_blacklist_api_v1_user_blacklist_post"];
  };
  "/api/v1/user/blacklist/{user_id}": {
    /**
     * Delete User From Blacklist
     * @description Add remove favorite user by id. If user already add return also success
     */
    delete: operations["delete_user_from_blacklist_api_v1_user_blacklist__user_id__delete"];
  };
  "/api/v1/user/{user_id}/reviews": {
    /**
     * Get User Last Reviews
     * @description The reviews made by the clients are stored and displayed for other users to see their reviews.
     * The coach id is passed to refer to the corresponding coach along with the creation date of the comment/review.
     */
    get: operations["get_user_last_reviews_api_v1_user__user_id__reviews_get"];
  };
  "/api/v1/user/{user_id}/reviews/info": {
    /** Get User All Reviews Info */
    get: operations["get_user_all_reviews_info_api_v1_user__user_id__reviews_info_get"];
  };
  "/api/v1/user/config": {
    /**
     * Get User Config
     * @description Get config for support
     */
    get: operations["get_user_config_api_v1_user_config_get"];
  };
  "/api/v1/user/{id}/notes": {
    /** List User Notes */
    get: operations["list_user_notes_api_v1_user__id__notes_get"];
  };
  "/api/v1/user/{id}/note/{notes_id}": {
    /** Get User Notes */
    get: operations["get_user_notes_api_v1_user__id__note__notes_id__get"];
    /** Update User Notes */
    put: operations["update_user_notes_api_v1_user__id__note__notes_id__put"];
    /** Delete User Notes */
    delete: operations["delete_user_notes_api_v1_user__id__note__notes_id__delete"];
  };
  "/api/v1/user/{id}/note": {
    /** Create User Notes */
    post: operations["create_user_notes_api_v1_user__id__note_post"];
  };
  "/api/v1/business/profile": {
    /** Get Business Profile */
    get: operations["get_business_profile_api_v1_business_profile_get"];
    /** Update Business Profile */
    put: operations["update_business_profile_api_v1_business_profile_put"];
  };
  "/api/v1/business/{business_id}/profile": {
    /** Get Business Profile Public */
    get: operations["get_business_profile_public_api_v1_business__business_id__profile_get"];
  };
  "/api/v1/business/{business_id}/claim": {
    /** Claim This Business */
    post: operations["claim_this_business_api_v1_business__business_id__claim_post"];
  };
  "/api/v1/business/{business_id}/questions": {
    /** Get Business Questions */
    get: operations["get_business_questions_api_v1_business__business_id__questions_get"];
  };
  "/api/v1/business/{business_id}/question": {
    /** Create Business Question */
    post: operations["create_business_question_api_v1_business__business_id__question_post"];
  };
  "/api/v1/business/question/{question_id}": {
    /** Get Business Question */
    get: operations["get_business_question_api_v1_business_question__question_id__get"];
    /** Update Question Thread */
    put: operations["update_question_thread_api_v1_business_question__question_id__put"];
    /** Create Question Thread */
    post: operations["create_question_thread_api_v1_business_question__question_id__post"];
    /** Delete Question */
    delete: operations["delete_question_api_v1_business_question__question_id__delete"];
  };
  "/api/v1/client/{client_id}/public": {
    /** Get Client Public */
    get: operations["get_client_public_api_v1_client__client_id__public_get"];
  };
  "/api/v1/coach/awards": {
    /** Get All Awards */
    get: operations["get_all_awards_api_v1_coach_awards_get"];
  };
  "/api/v1/coach/award": {
    /** Create Award */
    post: operations["create_award_api_v1_coach_award_post"];
  };
  "/api/v1/coach/award/{award_id}": {
    /** Update Award */
    put: operations["update_award_api_v1_coach_award__award_id__put"];
    /** Delete Award */
    delete: operations["delete_award_api_v1_coach_award__award_id__delete"];
  };
  "/api/v1/coach/certificates": {
    /** Get All Certificates */
    get: operations["get_all_certificates_api_v1_coach_certificates_get"];
  };
  "/api/v1/coach/certificate": {
    /** Create Certificate */
    post: operations["create_certificate_api_v1_coach_certificate_post"];
  };
  "/api/v1/coach/certificate/{certificate_id}": {
    /** Update Certificate */
    put: operations["update_certificate_api_v1_coach_certificate__certificate_id__put"];
    /** Delete Certificate */
    delete: operations["delete_certificate_api_v1_coach_certificate__certificate_id__delete"];
  };
  "/api/v1/coach/faqs": {
    /** Get All Faqs */
    get: operations["get_all_faqs_api_v1_coach_faqs_get"];
  };
  "/api/v1/coach/faq": {
    /** Create Faq */
    post: operations["create_faq_api_v1_coach_faq_post"];
  };
  "/api/v1/coach/faq/{faq_id}": {
    /** Update Faq */
    put: operations["update_faq_api_v1_coach_faq__faq_id__put"];
    /** Delete Faq */
    delete: operations["delete_faq_api_v1_coach_faq__faq_id__delete"];
  };
  "/api/v1/coach/equipments": {
    /** Get All Equipments */
    get: operations["get_all_equipments_api_v1_coach_equipments_get"];
  };
  "/api/v1/coach/equipment": {
    /** Create Equipment */
    post: operations["create_equipment_api_v1_coach_equipment_post"];
  };
  "/api/v1/coach/equipment/{equipment_id}": {
    /** Update Equipment */
    put: operations["update_equipment_api_v1_coach_equipment__equipment_id__put"];
    /** Delete Equipment */
    delete: operations["delete_equipment_api_v1_coach_equipment__equipment_id__delete"];
  };
  "/api/v1/coach/gallery": {
    /** Get Gallery */
    get: operations["get_gallery_api_v1_coach_gallery_get"];
    /** Update Gallery */
    put: operations["update_gallery_api_v1_coach_gallery_put"];
  };
  "/api/v1/coach/{coach_id}/services": {
    /**
     * Get Coach Services By Client
     * @description Get a list consisting of all the services being offered and the specified coach that is offering it.
     * This requires a coach id to be passed as a parameter for reference.
     */
    get: operations["get_coach_services_by_client_api_v1_coach__coach_id__services_get"];
  };
  "/api/v1/coach/services": {
    /**
     * Get Coach Services
     * @description Gets a list of all the service sessions and all the coaches currently offering it.
     */
    get: operations["get_coach_services_api_v1_coach_services_get"];
  };
  "/api/v1/coach/service/properties": {
    /** Get Service Properties Fields */
    get: operations["get_service_properties_fields_api_v1_coach_service_properties_get"];
  };
  "/api/v1/coach/services/order": {
    /**
     * Set Coach Services Order
     * @description Updates the coach service by organising in order chosen by the user for better organising and management.
     */
    put: operations["set_coach_services_order_api_v1_coach_services_order_put"];
  };
  "/api/v1/coach/service": {
    /**
     * Create Coach Service
     * @description Creates a service dedicated to a coach.
     */
    post: operations["create_coach_service_api_v1_coach_service_post"];
  };
  "/api/v1/coach/service/{service_id}": {
    /**
     * Get Coach Service
     * @description Gets the services offered by the specified coach by passing the service id as a parameter.
     */
    get: operations["get_coach_service_api_v1_coach_service__service_id__get"];
    /**
     * Update Coach Service
     * @description Updates the coaches information about their offered services and displays the complete change of their details.
     */
    put: operations["update_coach_service_api_v1_coach_service__service_id__put"];
    /**
     * Delete Coach Service
     * @description Deletes one of the services being offered by the specified coach by using coach id as reference.
     */
    delete: operations["delete_coach_service_api_v1_coach_service__service_id__delete"];
  };
  "/api/v1/coach/preview": {
    /** Get Coach Preview */
    get: operations["get_coach_preview_api_v1_coach_preview_get"];
  };
  "/api/v1/coach/{coach_id}/profile": {
    /**
     * Get Coach Profile
     * @description Checks the coach's profile using a unique coach id to call out the function and
     * returns all information regarding their profile.
     */
    get: operations["get_coach_profile_api_v1_coach__coach_id__profile_get"];
  };
  "/api/v1/coach/availability/calendar": {
    /**
     * Get Coach Availability Calendar
     * @description Get coach's availability from date and choose from list of slots.
     *
     * Returns the available slot from the start date till the end date.
     */
    get: operations["get_coach_availability_calendar_api_v1_coach_availability_calendar_get"];
  };
  "/api/v1/coach/availabilities": {
    /**
     * Get Coach Availabilities
     * @description Get coach's availability from date and choose from list of slots.
     *
     * Returns the available slot from the start date till the end date.
     */
    get: operations["get_coach_availabilities_api_v1_coach_availabilities_get"];
    /**
     * Create Time Slot Availabilities
     * @description Creates a time slot availability to record available times for the coaches and
     * to ensure there is no coinciding session stacking.
     */
    post: operations["create_time_slot_availabilities_api_v1_coach_availabilities_post"];
  };
  "/api/v1/coach/availability": {
    /**
     * Create Time Slot Availability
     * @description Creates a time slot availability to record available times for the coaches and
     * to ensure there is no coinciding session stacking.
     */
    post: operations["create_time_slot_availability_api_v1_coach_availability_post"];
  };
  "/api/v1/coach/availabilities/delete": {
    /** Delete Time Slot Availabilities */
    post: operations["delete_time_slot_availabilities_api_v1_coach_availabilities_delete_post"];
  };
  "/api/v1/coach/availability/{availability_id}": {
    /**
     * Get Time Slot Availability
     * @description Get the availability time for coaches if there is a current time schedule or returns null if unavailable.
     */
    get: operations["get_time_slot_availability_api_v1_coach_availability__availability_id__get"];
    /**
     * Update Time Slot Availability
     * @description Update the current time availability for the specified coach using the availability id and returns
     * the information updated.
     */
    put: operations["update_time_slot_availability_api_v1_coach_availability__availability_id__put"];
    /**
     * Remove Slot Availability
     * @description Remove the time schedule for the allotted time for the coach and returns the status of procedure.
     */
    delete: operations["remove_slot_availability_api_v1_coach_availability__availability_id__delete"];
  };
  "/api/v1/coach/availabilities/available/{date}": {
    /**
     * Post Coach Availability By Date
     * @description Get coach's availability from date and choose from list of slots.
     *
     * Returns the available slot from the start date till the end date.
     */
    delete: operations["post_coach_availability_by_date_api_v1_coach_availabilities_available__date__delete"];
  };
  "/api/v1/coach/availabilities/unavailable/{date}": {
    /**
     * Post Coach Unavailability Remove All
     * @description Get coach's availability from date and choose from list of slots.
     *
     * Returns the available slot from the start date till the end date.
     */
    delete: operations["post_coach_unavailability_remove_all_api_v1_coach_availabilities_unavailable__date__delete"];
  };
  "/api/v1/coach/availabilities/weekly": {
    /**
     * Get Coach Availability Weekly
     * @description Get coach's availability from date and choose from list of slots.
     *
     * Returns the available slot from the start date till the end date.
     */
    get: operations["get_coach_availability_weekly_api_v1_coach_availabilities_weekly_get"];
  };
  "/api/v1/coach/available": {
    /** Coach Available */
    put: operations["coach_available_api_v1_coach_available_put"];
  };
  "/api/v1/coach/analytics/revenue": {
    /** Revenue Analytics */
    get: operations["revenue_analytics_api_v1_coach_analytics_revenue_get"];
  };
  "/api/v1/coach/analytics/revenue-chart": {
    /** Revenue Chart Analytics */
    get: operations["revenue_chart_analytics_api_v1_coach_analytics_revenue_chart_get"];
  };
  "/api/v1/coach/analytics/session-info": {
    /** Session Info Analytics */
    get: operations["session_info_analytics_api_v1_coach_analytics_session_info_get"];
  };
  "/api/v1/coach/analytics/clients": {
    /** Total Client Analytics */
    get: operations["total_client_analytics_api_v1_coach_analytics_clients_get"];
  };
  "/api/v1/coach/analytics/summary": {
    /** Coach Analytics Summary */
    get: operations["coach_analytics_summary_api_v1_coach_analytics_summary_get"];
  };
  "/api/v1/coach/boost-profile": {
    /** Boost Profile */
    post: operations["boost_profile_api_v1_coach_boost_profile_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Accommodations
     * @enum {string}
     */
    Accommodations: "any" | "hotel" | "house" | "apartment" | "office" | "other";
    /** AddressOut */
    AddressOut: {
      /**
       * Lng
       * @example 55.296249
       */
      lng: number;
      /**
       * Lat
       * @example 25.276
       */
      lat: number;
      /**
       * Zoom
       * @default 17
       * @example 14
       */
      zoom?: number | null;
      /**
       * Address
       * @description Address
       * @example 548, floor 5, Cluster G, Tower Al mas, JLT, Dubai, UAE
       */
      address?: string | null;
      /**
       * Country
       * @description Country
       * @example United Arab Emirates
       */
      country?: string | null;
      /**
       * State
       * @description state
       * @example Dubai
       */
      state?: string | null;
      /**
       * City
       * @description city
       * @example Dubai
       */
      city?: string | null;
      /**
       * Line1
       * @description line1
       * @example Jumeirah Lake Towers
       */
      line1?: string | null;
      /**
       * Line2
       * @description line2
       * @example 1068, Tower Meadows 2
       */
      line2?: string | null;
      /**
       * Zip
       * @description zip (po box)
       */
      zip?: string | null;
      /**
       * Building
       * @description building
       * @example Tower Meadows 2
       */
      building?: string | null;
      /**
       * Entrance
       * @description entrance
       * @example main
       */
      entrance?: string | null;
      /**
       * Floor
       * @description floor
       * @example 12
       */
      floor?: string | null;
      /**
       * Apartment
       * @description apartment
       * @example 1245
       */
      apartment?: string | null;
      /**
       * Neighborhood
       * @description neighborhood
       */
      neighborhood?: string | null;
      /**
       * @description accommodation
       * @example any
       */
      accommodation?: components["schemas"]["Accommodations"] | null;
      /**
       * @description allergy
       * @example none
       */
      allergy?: components["schemas"]["UserAllergy"] | null;
      /**
       * Radius
       * @description Radius in meters
       * @example 10000
       */
      radius?: number | null;
      /**
       * Details
       * @description notes for address
       */
      details?: string | null;
      parking?: components["schemas"]["ParkingType"] | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Isdefault */
      isDefault?: boolean | null;
      /**
       * Name
       * @description name
       * @example Name of address
       */
      name?: string | null;
      /** Id */
      id?: string | null;
    };
    /** AddressSessionIn */
    AddressSessionIn: {
      /**
       * Lng
       * @example 55.296249
       */
      lng?: number | null;
      /**
       * Lat
       * @example 25.276
       */
      lat?: number | null;
      /**
       * Zoom
       * @default 17
       * @example 14
       */
      zoom?: number | null;
      /**
       * Address
       * @description Address
       * @example 548, floor 5, Cluster G, Tower Al mas, JLT, Dubai, UAE
       */
      address?: string | null;
      /**
       * Country
       * @description Country
       * @example United Arab Emirates
       */
      country?: string | null;
      /**
       * State
       * @description state
       * @example Dubai
       */
      state?: string | null;
      /**
       * City
       * @description city
       * @example Dubai
       */
      city?: string | null;
      /**
       * Line1
       * @description line1
       * @example Jumeirah Lake Towers
       */
      line1?: string | null;
      /**
       * Line2
       * @description line2
       * @example 1068, Tower Meadows 2
       */
      line2?: string | null;
      /**
       * Zip
       * @description zip (po box)
       */
      zip?: string | null;
      /**
       * Building
       * @description building
       * @example Tower Meadows 2
       */
      building?: string | null;
      /**
       * Entrance
       * @description entrance
       * @example main
       */
      entrance?: string | null;
      /**
       * Floor
       * @description floor
       * @example 12
       */
      floor?: string | null;
      /**
       * Apartment
       * @description apartment
       * @example 1245
       */
      apartment?: string | null;
      /**
       * Neighborhood
       * @description neighborhood
       */
      neighborhood?: string | null;
      /**
       * @description accommodation
       * @example any
       */
      accommodation?: components["schemas"]["Accommodations"] | null;
      /**
       * @description allergy
       * @example none
       */
      allergy?: components["schemas"]["UserAllergy"] | null;
      /**
       * Radius
       * @description Radius in meters
       * @example 10000
       */
      radius?: number | null;
      /**
       * Details
       * @description notes for address
       */
      details?: string | null;
      parking?: components["schemas"]["ParkingType"] | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Id */
      id?: string | null;
    };
    /** AddressSessionOut */
    AddressSessionOut: {
      /**
       * Lng
       * @example 55.296249
       */
      lng?: number | null;
      /**
       * Lat
       * @example 25.276
       */
      lat?: number | null;
      /**
       * Zoom
       * @default 17
       * @example 14
       */
      zoom?: number | null;
      /**
       * Address
       * @description Address
       * @example 548, floor 5, Cluster G, Tower Al mas, JLT, Dubai, UAE
       */
      address?: string | null;
      /**
       * Country
       * @description Country
       * @example United Arab Emirates
       */
      country?: string | null;
      /**
       * State
       * @description state
       * @example Dubai
       */
      state?: string | null;
      /**
       * City
       * @description city
       * @example Dubai
       */
      city?: string | null;
      /**
       * Line1
       * @description line1
       * @example Jumeirah Lake Towers
       */
      line1?: string | null;
      /**
       * Line2
       * @description line2
       * @example 1068, Tower Meadows 2
       */
      line2?: string | null;
      /**
       * Zip
       * @description zip (po box)
       */
      zip?: string | null;
      /**
       * Building
       * @description building
       * @example Tower Meadows 2
       */
      building?: string | null;
      /**
       * Entrance
       * @description entrance
       * @example main
       */
      entrance?: string | null;
      /**
       * Floor
       * @description floor
       * @example 12
       */
      floor?: string | null;
      /**
       * Apartment
       * @description apartment
       * @example 1245
       */
      apartment?: string | null;
      /**
       * Neighborhood
       * @description neighborhood
       */
      neighborhood?: string | null;
      /**
       * @description accommodation
       * @example any
       */
      accommodation?: components["schemas"]["Accommodations"] | null;
      /**
       * @description allergy
       * @example none
       */
      allergy?: components["schemas"]["UserAllergy"] | null;
      /**
       * Radius
       * @description Radius in meters
       * @example 10000
       */
      radius?: number | null;
      /**
       * Details
       * @description notes for address
       */
      details?: string | null;
      parking?: components["schemas"]["ParkingType"] | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Id */
      id?: string | null;
    };
    /** AdminRevenueChartOut */
    AdminRevenueChartOut: {
      /** Labels */
      labels?: ((string | number)[]) | null;
      /** Data */
      data: components["schemas"]["RevenueChartDataOut"][];
    };
    /** AppAccommodation */
    AppAccommodation: {
      /** @description Accomodation type */
      type?: components["schemas"]["Accommodations"];
      /**
       * Fields
       * @description Accomodation type
       */
      fields?: components["schemas"]["LocationFields"][];
    };
    /** AppAuthentication */
    AppAuthentication: {
      /** Googleurl */
      googleUrl?: string | null;
      /** Appleurl */
      appleUrl?: string | null;
      /** Facebookurl */
      facebookUrl?: string | null;
      /** Telegramurl */
      telegramUrl?: string | null;
    };
    /** AppConfigOut */
    AppConfigOut: {
      /**
       * @default {
       *   "name": "Stayfit",
       *   "apiVersion": "undefined",
       *   "theme": "default"
       * }
       */
      app?: components["schemas"]["ApplicationInfo"];
      /** @default {} */
      authentication?: components["schemas"]["AppAuthentication"];
      /** @default {} */
      settings?: components["schemas"]["AppSettingsOut"];
      /**
       * @default {
       *   "privacyPolicy": "https://stretch.com/privacy-policy/"
       * }
       */
      links?: components["schemas"]["AppLinks"];
      /** @default {} */
      contacts?: components["schemas"]["AppContacts"];
      /**
       * @default {
       *   "languages": [],
       *   "currencies": [],
       *   "accommodations": [
       *     {
       *       "fields": [
       *         "neighborhood",
       *         "building",
       *         "apartment"
       *       ],
       *       "type": "hotel"
       *     },
       *     {
       *       "fields": [
       *         "neighborhood",
       *         "building"
       *       ],
       *       "type": "house"
       *     },
       *     {
       *       "fields": [
       *         "neighborhood",
       *         "building",
       *         "entrance",
       *         "floor",
       *         "apartment"
       *       ],
       *       "type": "apartment"
       *     },
       *     {
       *       "fields": [
       *         "neighborhood",
       *         "building",
       *         "entrance",
       *         "floor",
       *         "apartment"
       *       ],
       *       "type": "other"
       *     }
       *   ]
       * }
       */
      dictionaries?: components["schemas"]["AppDictionaries"];
      /**
       * Categories
       * @default []
       */
      categories?: components["schemas"]["CategoryOut"][];
      promo?: components["schemas"]["UserPromoOut"] | null;
    };
    /** AppContacts */
    AppContacts: {
      /**
       * Phone
       * @description Support's Phone number
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Support's whatsapp
       */
      whatsapp?: string | null;
      /**
       * Email
       * @description Support's Email
       */
      email?: string | null;
      /**
       * Telegram
       * @description Support's Telegram
       */
      telegram?: string | null;
      /**
       * Viber
       * @description Support's Viber
       */
      viber?: string | null;
    };
    /** AppDictionaries */
    AppDictionaries: {
      /**
       * Languages
       * @default []
       */
      languages?: components["schemas"]["UserLanguages"][] | null;
      /**
       * Currencies
       * @default []
       */
      currencies?: string[] | null;
      /** Cancellationpolicy */
      cancellationPolicy?: string | null;
      /**
       * Accommodations
       * @default [
       *   {
       *     "type": "hotel",
       *     "fields": [
       *       "neighborhood",
       *       "building",
       *       "apartment"
       *     ]
       *   },
       *   {
       *     "type": "house",
       *     "fields": [
       *       "neighborhood",
       *       "building"
       *     ]
       *   },
       *   {
       *     "type": "apartment",
       *     "fields": [
       *       "neighborhood",
       *       "building",
       *       "entrance",
       *       "floor",
       *       "apartment"
       *     ]
       *   },
       *   {
       *     "type": "other",
       *     "fields": [
       *       "neighborhood",
       *       "building",
       *       "entrance",
       *       "floor",
       *       "apartment"
       *     ]
       *   }
       * ]
       */
      accommodations?: components["schemas"]["AppAccommodation"][];
    };
    /** AppLinks */
    AppLinks: {
      /**
       * Termsandconditions
       * @description url to terms and conditions
       */
      termsAndConditions?: string;
      /**
       * Contactinfo
       * @description url to contact support page
       */
      contactInfo?: string;
      /**
       * Cancellationpolicy
       * @description url to contact support page
       */
      cancellationPolicy?: string;
      /**
       * Legaldocuments
       * @description url to legal documents
       */
      legalDocuments?: string;
      /**
       * Privacypolicy
       * @description url to privacy documents
       * @default https://stretch.com/privacy-policy/
       */
      privacyPolicy?: string;
      /**
       * Licensedocuments
       * @description url to license documents
       */
      licenseDocuments?: string;
      /**
       * Supportpage
       * @description url to support page
       */
      supportPage?: string;
      /**
       * Marketingpage
       * @description url to marketing page
       */
      marketingPage?: string;
    };
    /** AppSettingsOut */
    AppSettingsOut: {
      /** Country */
      country?: string | null;
      language?: components["schemas"]["UserLanguages"] | null;
      /** Currency */
      currency?: string | null;
    };
    /** ApplicationInfo */
    ApplicationInfo: {
      /**
       * Name
       * @default Stayfit
       */
      name?: string | null;
      /**
       * Apiversion
       * @default undefined
       */
      apiVersion?: string | null;
      /**
       * Theme
       * @default default
       */
      theme?: string | null;
    };
    /** AvailabilityClientIn */
    AvailabilityClientIn: {
      /** Addressid */
      addressId?: string | null;
      /**
       * Lng
       * @example 55.1254
       */
      lng?: number | null;
      /**
       * Lat
       * @example 25.1254
       */
      lat?: number | null;
      /**
       * Fromdate
       * @description Get the available time starting from this value
       * @default 2024-05-20T07:53:50.514290Z
       * @example 2024-05-21T07:53:50.514299Z
       */
      fromDate?: string;
      /**
       * Todate
       * @default 2024-06-20T07:53:50.514387Z
       * @example 2024-06-20T07:53:50.514395Z
       */
      toDate?: string;
      /** @default auto */
      dateFormat?: components["schemas"]["AvailabilityDateFormat"];
    };
    /** AvailabilityClientOut */
    AvailabilityClientOut: {
      /** Fromdate */
      fromDate?: string | null;
      /** Todate */
      toDate?: string | null;
      /** Distance */
      distance?: number | null;
      /** Slots */
      slots?: Record<string, never> | unknown[] | null;
      address?: components["schemas"]["AddressOut"] | null;
      coach?: components["schemas"]["PublicCoachProfileOut"] | null;
      service?: components["schemas"]["ServiceOut"] | null;
    };
    /**
     * AvailabilityDateFormat
     * @enum {string}
     */
    AvailabilityDateFormat: "utc" | "auto";
    /**
     * AvailabilityIn
     * @description Availability Input data
     */
    AvailabilityIn: {
      /** Id */
      id?: string | null;
      /** Title */
      title?: string | null;
      /**
       * Start
       * @description Start date when slot is working
       * @example 2024-05-20
       */
      start?: string | null;
      /**
       * End
       * @description End date when slot is working
       */
      end?: string | null;
      /**
       * Enable
       * @default true
       * @example true
       */
      enable?: boolean | null;
      /**
       * Slotstart
       * Format: time
       * @example 10:00T+04:00
       */
      slotStart?: string;
      /**
       * Slotend
       * Format: time
       * @example 16:30T+04:00
       */
      slotEnd?: string;
      /**
       * @default none
       * @example none
       */
      slotType?: components["schemas"]["AvailabilityType"] | null;
      /**
       * @default available
       * @example available
       */
      slotState?: components["schemas"]["AvailabilityState"] | null;
    };
    /** Availability */
    AvailabilityOut: {
      /** Id */
      id: string | null;
      /** Title */
      title?: string | null;
      /** Start */
      start?: string | null;
      /** End */
      end?: string | null;
      /**
       * Enable
       * @default true
       */
      enable?: boolean;
      /**
       * Slotstart
       * @example 10:00T+04:00
       */
      slotStart?: string | null;
      /**
       * Slotend
       * @example 10:00T+04:00
       */
      slotEnd?: string | null;
      /** @default none */
      slotType?: components["schemas"]["AvailabilityType"] | null;
      /** @default available */
      slotState?: components["schemas"]["AvailabilityState"];
      /** Client */
      client?: string | null;
      /**
       * Slotgap
       * @example 12:00T+04:00
       */
      slotGap?: string | null;
    };
    /** AvailabilityServiceIn */
    AvailabilityServiceIn: {
      /** Id */
      id?: string | null;
      /** Title */
      title?: string | null;
      /**
       * Start
       * @description Start date when slot is working
       * @example 2024-05-20
       */
      start?: string | null;
      /**
       * End
       * @description End date when slot is working
       */
      end?: string | null;
      /**
       * Enable
       * @default true
       * @example true
       */
      enable?: boolean | null;
      /**
       * Slotstart
       * Format: time
       * @example 10:00T+04:00
       */
      slotStart?: string;
      /**
       * Slotend
       * @example 16:30T+04:00
       */
      slotEnd?: string | null;
      /**
       * @default none
       * @example none
       */
      slotType?: components["schemas"]["AvailabilityType"] | null;
      /**
       * @default available
       * @example available
       */
      slotState?: components["schemas"]["AvailabilityState"] | null;
    };
    /**
     * AvailabilityState
     * @enum {string}
     */
    AvailabilityState: "available" | "busy" | "session" | "closed";
    /**
     * AvailabilityType
     * @enum {string}
     */
    AvailabilityType: "daily" | "workday" | "weekend" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday" | "once" | "ignore" | "session" | "none";
    /** AvailabilityUpdateIn */
    AvailabilityUpdateIn: {
      /** Id */
      id?: string | null;
      /** Title */
      title?: string | null;
      /**
       * Start
       * @example 2024-05-20
       */
      start?: string | null;
      /**
       * End
       * @description End date when slot is working
       */
      end?: string | null;
      /**
       * Enable
       * @default true
       * @example true
       */
      enable?: boolean | null;
      /**
       * Slotstart
       * Format: time
       * @example 10:00T+04:00
       */
      slotStart?: string;
      /**
       * Slotend
       * Format: time
       * @example 16:30T+04:00
       */
      slotEnd?: string;
      /**
       * @default none
       * @example none
       */
      slotType?: components["schemas"]["AvailabilityType"] | null;
      /**
       * @default available
       * @example available
       */
      slotState?: components["schemas"]["AvailabilityState"] | null;
    };
    /** AvailableIn */
    AvailableIn: {
      /**
       * Available
       * @default true
       */
      available?: boolean;
    };
    /** AwardCreateIn */
    AwardCreateIn: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
    };
    /** AwardFileOut */
    AwardFileOut: {
      /** Contenttype */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Full size url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Full size url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** AwardOut */
    AwardOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["AwardFileOut"][] | null;
    };
    /** AwardUpdateIn */
    AwardUpdateIn: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Attachmentids */
      attachmentIds?: string[] | null;
    };
    /** BalanceOut */
    BalanceOut: {
      /** Amount */
      amount?: number | null;
      /** Currency */
      currency?: string | null;
    };
    /** BlackListUserIn */
    BlackListUserIn: {
      /**
       * Userid
       * Format: uuid
       * @description Favorite user id
       */
      userId: string;
      /**
       * Message
       * @description Reason for black list (note and comments)
       */
      message?: string | null;
    };
    /** BlackListUserListOut */
    BlackListUserListOut: {
      /**
       * Userid
       * Format: uuid
       * @description User ID
       */
      userId: string;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Rating */
      rating?: number | null;
      /** Reviewscount */
      reviewsCount?: number | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Verified */
      verified?: boolean | null;
    };
    /** BookedUsersAnalyticsOut */
    BookedUsersAnalyticsOut: {
      /**
       * Comparefrom
       * @description Comparison from date
       */
      compareFrom?: string | null;
      /**
       * Compareto
       * @description Comparison to date
       */
      compareTo?: string | null;
      /** Total */
      total: number;
      /** Totalpercentage */
      totalPercentage?: number | null;
      /** New */
      new: number;
      /** Newpercentage */
      newPercentage?: number | null;
      /** Previous */
      previous: number;
      /** Previouspercentage */
      previousPercentage?: number | null;
      /**
       * Avatarurls
       * @default []
       */
      avatarUrls?: string[] | null;
      /** Male */
      male: number;
      /** Female */
      female: number;
    };
    /** BookingReasonOut */
    BookingReasonOut: {
      type?: components["schemas"]["BookingReasonType"] | null;
      /** Message */
      message?: string | null;
    };
    /**
     * BookingReasonType
     * @enum {string}
     */
    BookingReasonType: "client_unverified" | "client_too_far" | "client_blocked" | "coach_unavailable" | "coach_allergic" | "coach_blocked";
    /** BoostedProfileIn */
    BoostedProfileIn: {
      /**
       * Method
       * @default card
       * @example card
       */
      method?: string | null;
    };
    /** BusinessAvailabilityIn */
    BusinessAvailabilityIn: {
      /** Title */
      title?: string | null;
      /**
       * Slotstart
       * @description time of open
       * @example 05:00
       */
      slotStart?: string | null;
      /**
       * Slotend
       * @description time of close
       * @example 12:00
       */
      slotEnd?: string | null;
      /**
       * Slotstart2
       * @description time of open second range
       * @example 15:00
       */
      slotStart2?: string | null;
      /**
       * Slotend2
       * @description time of close second range
       * @example 22:00
       */
      slotEnd2?: string | null;
      /**
       * Isclosed
       * @description is location open all hours
       * @default false
       */
      isClosed?: boolean;
      /** @example monday */
      slotType?: components["schemas"]["OpenHourType"] | null;
      /**
       * @default available
       * @example available
       */
      slotState?: components["schemas"]["AvailabilityState"] | null;
      /**
       * Timerangeverbose
       * @example Time range as it is read in from web scraper
       */
      timerangeVerbose?: string | null;
      /**
       * Timezone
       * @default Asia/Dubai
       */
      timezone?: string;
    };
    /** BusinessAvailabilityOut */
    BusinessAvailabilityOut: {
      /** Title */
      title?: string | null;
      /**
       * Slotstart
       * @description time of open
       * @example 05:00
       */
      slotStart?: string | null;
      /**
       * Slotend
       * @description time of close
       * @example 12:00
       */
      slotEnd?: string | null;
      /**
       * Slotstart2
       * @description time of open second range
       * @example 15:00
       */
      slotStart2?: string | null;
      /**
       * Slotend2
       * @description time of close second range
       * @example 22:00
       */
      slotEnd2?: string | null;
      /**
       * Isclosed
       * @description is location open all hours
       * @default false
       */
      isClosed?: boolean;
      /** @example monday */
      slotType?: components["schemas"]["OpenHourType"] | null;
      /**
       * @default available
       * @example available
       */
      slotState?: components["schemas"]["AvailabilityState"] | null;
      /**
       * Timerangeverbose
       * @example Time range as it is read in from web scraper
       */
      timerangeVerbose?: string | null;
      /**
       * Timezone
       * @default Asia/Dubai
       */
      timezone?: string;
    };
    /** BusinessClaimIn */
    BusinessClaimIn: {
      /**
       * Email
       * Format: email
       */
      email?: string;
    };
    /** BusinessContactIn */
    BusinessContactIn: {
      type?: components["schemas"]["BusinessContactType"];
      /** Value */
      value?: string;
      /**
       * Values
       * @default []
       */
      values?: string[];
      /**
       * Verified
       * @default false
       */
      verified?: boolean;
    };
    /**
     * BusinessContactType
     * @enum {string}
     */
    BusinessContactType: "instagram" | "facebook" | "tiktok" | "twitter" | "x(twitter)" | "whatsapp" | "telegram" | "website" | "youtube" | "snapchat" | "wechat" | "kakao" | "line" | "viber" | "tumblr" | "vkontakte" | "linkedin";
    /** BusinessProfileOut */
    BusinessProfileOut: {
      /** Id */
      id?: string | null;
      /**
       * Categoryid
       * Format: uuid
       */
      categoryId?: string;
      /**
       * Displayname
       * @description User display name
       */
      displayName?: string | null;
      /** Avatar Url */
      avatar_url?: string | null;
      /** @default business */
      type?: components["schemas"]["UserType"] | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Description */
      description?: string | null;
      /**
       * Distance
       * @description Distance
       */
      distance?: number | null;
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /** Services */
      services?: components["schemas"]["ServiceOut"][] | null;
      /** Images */
      images?: components["schemas"]["PublicFileOut"][] | null;
      /** Videos */
      videos?: components["schemas"]["PublicFileOut"][] | null;
      /** Awards */
      awards?: components["schemas"]["AwardOut"][] | null;
      /** Certificates */
      certificates?: components["schemas"]["PublicCertificateFileOut"][] | null;
      /**
       * Allowbooking
       * @description User allowed to book this coach based on verification
       * @default false
       */
      allowBooking?: boolean;
      /** Favorite */
      favorite?: boolean | null;
      /** Boosted */
      boosted?: boolean | null;
      /** Availability */
      availability?: components["schemas"]["BusinessAvailabilityOut"][] | null;
      /** Features */
      features?: string[] | null;
      address?: components["schemas"]["PublicAddressOut"];
      /** Contacts */
      contacts?: components["schemas"]["BusinessContactIn"][] | null;
      /** Price */
      price?: number | null;
      /** Minprice */
      minPrice?: number | null;
      /** Maxprice */
      maxPrice?: number | null;
      /** Pricecurrency */
      priceCurrency?: string | null;
      /**
       * Allownonverify
       * @description allows non verified users to book with them or not
       * @default true
       */
      allowNonVerify?: boolean;
    };
    /** BusinessServiceIn */
    BusinessServiceIn: {
      /** Name */
      name: string;
      /** Pricedetails */
      priceDetails: string;
    };
    /** BusinessSocialMediaIn */
    BusinessSocialMediaIn: {
      /**
       * Instagram
       * @default []
       */
      instagram?: string[];
      /**
       * Facebook
       * @default []
       */
      facebook?: string[];
      /**
       * Tiktok
       * @default []
       */
      tiktok?: string[];
      /**
       * Twitter
       * @default []
       */
      twitter?: string[];
      /**
       * Whatsapp
       * @default []
       */
      whatsapp?: string[];
      /**
       * Telegram
       * @default []
       */
      telegram?: string[];
      /**
       * Website
       * @default []
       */
      website?: string[];
      /**
       * Youtube
       * @default []
       */
      youtube?: string[];
      /**
       * Snapchat
       * @default []
       */
      snapchat?: string[];
      /**
       * Wechat
       * @default []
       */
      wechat?: string[];
      /**
       * Kakao
       * @default []
       */
      kakao?: string[];
      /**
       * Line
       * @default []
       */
      line?: string[];
      /**
       * Viber
       * @default []
       */
      viber?: string[];
      /**
       * Tumblr
       * @default []
       */
      tumblr?: string[];
      /**
       * Vkontakte
       * @default []
       */
      vkontakte?: string[];
      /**
       * Linkedin
       * @default []
       */
      linkedin?: string[];
    };
    /** BusinessUpdateProfileIn */
    BusinessUpdateProfileIn: {
      /**
       * @default {
       *   "instagram": [],
       *   "facebook": [],
       *   "tiktok": [],
       *   "twitter": [],
       *   "whatsapp": [],
       *   "telegram": [],
       *   "website": [],
       *   "youtube": [],
       *   "snapchat": [],
       *   "wechat": [],
       *   "kakao": [],
       *   "line": [],
       *   "viber": [],
       *   "tumblr": [],
       *   "vkontakte": [],
       *   "linkedin": []
       * }
       */
      contacts?: components["schemas"]["BusinessSocialMediaIn"];
      /**
       * Availabilities
       * @default []
       */
      availabilities?: components["schemas"]["BusinessAvailabilityIn"][];
      /**
       * Categories
       * @default []
       */
      categories?: string[];
      /**
       * Amenities
       * @default []
       */
      amenities?: string[];
      /**
       * Services
       * @default []
       */
      services?: components["schemas"]["BusinessServiceIn"][];
      /**
       * Faqs
       * @default []
       */
      faqs?: components["schemas"]["FAQUpdateIn"][];
    };
    /** CalendarOut */
    CalendarOut: {
      /** Availability */
      availability?: components["schemas"]["AvailabilityOut"][] | null;
      /** Unavailability */
      unavailability?: components["schemas"]["AvailabilityOut"][] | null;
      /** Date */
      date?: string | null;
      /** Unavailable */
      unavailable?: boolean | null;
      /** Sessions */
      sessions?: components["schemas"]["AvailabilityOut"][] | null;
    };
    /**
     * CardPaymentBrandType
     * @enum {string}
     */
    CardPaymentBrandType: "amex" | "diners" | "discover" | "eftpos_au" | "jcb" | "mastercard" | "unionpay" | "visa" | "bank_account" | "unknown";
    /** Category */
    CategoryOut: {
      /** Name */
      name?: string;
      /** Slug */
      slug?: string | null;
      /** Description */
      description?: string | null;
      /** @default business */
      type?: components["schemas"]["CategoryType"] | null;
      /** Parentid */
      parentId?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Imageurl */
      imageUrl?: string | null;
      /** Count */
      count?: number | null;
      /** Subcategories */
      subcategories?: components["schemas"]["CategoryOut"][] | null;
    };
    /**
     * CategoryType
     * @enum {string}
     */
    CategoryType: "stretch" | "coach" | "business" | "nutrition" | "calculator";
    /** ClientDetails */
    ClientDetails: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description User experience
       */
      experience?: number | null;
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Blocked
       * @default false
       */
      blocked?: boolean;
      /**
       * Username
       * @description Username input
       */
      username?: string | null;
      /**
       * Email
       * @description Email format
       * @example info@stretch.com
       */
      email?: string | null;
      /**
       * Timezone
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      timezone?: string | null;
      /**
       * Birthdate
       * @description User Birth date
       * @example 2000-07-08
       */
      birthDate?: string | null;
      /**
       * Fullname
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      fullName?: string | null;
    };
    /** CoachAnalyticsSummary */
    CoachAnalyticsSummary: {
      /**
       * Comparefrom
       * @description Comparison from date
       */
      compareFrom?: string | null;
      /**
       * Compareto
       * @description Comparison to date
       */
      compareTo?: string | null;
      revenue: components["schemas"]["TotalRevenueAnalyticsOut"];
      revenueChart: components["schemas"]["AdminRevenueChartOut"];
      sessionInfo: components["schemas"]["SessionInfoAnalyticsOut"];
      clients: components["schemas"]["BookedUsersAnalyticsOut"];
    };
    /** CoachCertificateCreateIn */
    CoachCertificateCreateIn: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
      /**
       * Issuedate
       * Format: date-time
       */
      issueDate?: string;
      /**
       * Expiredate
       * Format: date-time
       */
      expireDate?: string;
    };
    /** CoachCertificateFileOut */
    CoachCertificateFileOut: {
      /** Contenttype */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Full size url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Full size url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** CoachCertificateOut */
    CoachCertificateOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Issuedate
       * Format: date-time
       */
      issueDate?: string;
      /**
       * Expiredate
       * Format: date-time
       */
      expireDate?: string;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["CoachCertificateFileOut"][] | null;
    };
    /** CoachCertificateUpdateIn */
    CoachCertificateUpdateIn: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Attachmentids */
      attachmentIds?: string[] | null;
      /** Issuedate */
      issueDate?: string | null;
      /** Expiredate */
      expireDate?: string | null;
    };
    /** CoachDetails */
    CoachDetails: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description User experience
       */
      experience?: number | null;
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Blocked
       * @default false
       */
      blocked?: boolean;
      /**
       * Username
       * @description Username input
       */
      username?: string | null;
      /**
       * Email
       * @description Email format
       * @example info@stretch.com
       */
      email?: string | null;
      /**
       * Timezone
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      timezone?: string | null;
      /**
       * Birthdate
       * @description User Birth date
       * @example 2000-07-08
       */
      birthDate?: string | null;
      /**
       * Fullname
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      fullName?: string | null;
      /**
       * Boosted
       * @default false
       */
      boosted?: boolean;
    };
    /**
     * CurrencyCode
     * @enum {string}
     */
    CurrencyCode: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTC" | "BTN" | "BTS" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLF" | "CLP" | "CNH" | "CNY" | "COP" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DASH" | "DJF" | "DKK" | "DOGE" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "ETH" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GGP" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IMP" | "INR" | "IQD" | "IRR" | "ISK" | "JEP" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LD" | "LKR" | "LRD" | "LSL" | "LTC" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NXT" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STD" | "STN" | "STR" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VEF_BLKMKT" | "VEF_DICOM" | "VEF_DIPRO" | "VES" | "VND" | "VUV" | "WST" | "XAF" | "XAG" | "XAU" | "XCD" | "XDR" | "XMR" | "XOF" | "XPD" | "XPF" | "XPT" | "XRP" | "YER" | "ZAR" | "ZMW" | "ZWL";
    /** DeleteResponse */
    DeleteResponse: {
      /**
       * Status
       * @description Stretch status response
       * @default success
       */
      status?: string;
      /**
       * Deleted
       * @default 0
       */
      deleted?: number;
    };
    /** EquipmentCreateIn */
    EquipmentCreateIn: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
    };
    /** EquipmentFileOut */
    EquipmentFileOut: {
      /** Contenttype */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Full size url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Full size url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** EquipmentOut */
    EquipmentOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Public
       * @default true
       */
      public?: boolean;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["EquipmentFileOut"][] | null;
    };
    /** EquipmentUpdateIn */
    EquipmentUpdateIn: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Attachmentids */
      attachmentIds?: string[] | null;
    };
    /** ErrorResponse */
    ErrorResponse: {
      /** Error */
      error: string;
      /** Message */
      message: string;
      /** Code */
      code: number;
    };
    /** FAQCreateIn */
    FAQCreateIn: {
      /** Question */
      question: string;
      /** Answer */
      answer: string;
    };
    /** FAQDetailOut */
    FAQDetailOut: {
      /** Question */
      question: string;
      /** Answer */
      answer: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** FAQOut */
    FAQOut: {
      /** Question */
      question: string;
      /** Answer */
      answer: string;
    };
    /** FAQUpdateIn */
    FAQUpdateIn: {
      /** Question */
      question?: string | null;
      /** Answer */
      answer?: string | null;
    };
    /** FavoriteUserIn */
    FavoriteUserIn: {
      /**
       * Userid
       * Format: uuid
       * @description Favorite user id
       */
      userId: string;
      /**
       * Group
       * @description Favorite group
       */
      group?: string | null;
    };
    /** GalleryFileOut */
    GalleryFileOut: {
      /** Contenttype */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Full size url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Full size url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * LocationFields
     * @enum {string}
     */
    LocationFields: "neighborhood" | "building" | "entrance" | "floor" | "apartment";
    /** MediaFileOut */
    MediaFileOut: {
      /** Contenttype */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Full size url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Full size url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
    };
    /** NotesCreateIn */
    NotesCreateIn: {
      /** Title */
      title: string;
      /** Description */
      description: string;
    };
    /** NotesUpdateIn */
    NotesUpdateIn: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** NotificationStatus */
    NotificationStatus: {
      /**
       * Unratedsessions
       * @default 0
       */
      unratedSessions?: number;
      /**
       * Upcomingsessions
       * @default 0
       */
      upcomingSessions?: number;
      /**
       * Newnotifications
       * @default 0
       */
      newNotifications?: number;
      /**
       * Newmessages
       * @default 0
       */
      newMessages?: number;
    };
    /**
     * OpenHourType
     * @enum {string}
     */
    OpenHourType: "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday";
    /**
     * ParkingType
     * @enum {string}
     */
    ParkingType: "free" | "paid" | "other";
    /** PaymentMethod */
    PaymentMethodOut: {
      /** Name */
      name: string | null;
      /**
       * Default
       * @default false
       */
      default?: boolean;
      /** Method */
      method: string;
      brand?: components["schemas"]["CardPaymentBrandType"] | null;
      /** Last4 */
      last4?: string | null;
      /**
       * Type
       * @default standard
       */
      type?: string;
    };
    /** PaymentOut */
    PaymentOut: {
      /**
       * Id
       * @description ID for payment schema
       */
      id?: string | null;
      /**
       * Price
       * @example 199.9
       */
      price?: number | null;
      /**
       * Methodid
       * Format: uuid
       */
      methodId?: string;
      /** Coachid */
      coachId?: string | null;
      /** Clientid */
      clientId?: string | null;
      /** Serviceid */
      serviceId?: string | null;
      /** Clientsecret */
      clientSecret?: string | null;
      /** Checkout */
      checkout?: Record<string, never> | null;
      /** Expirationat */
      expirationAt?: string | null;
      /** Createdat */
      createdAt?: string | null;
      transactionType?: components["schemas"]["TransactionType"] | null;
      /** Confirmurl */
      confirmUrl?: string | null;
      /** Currency */
      currency?: string | null;
      status?: components["schemas"]["PaymentState"] | null;
    };
    /** PaymentSessionOut */
    PaymentSessionOut: {
      /**
       * Id
       * @description ID for payment schema
       */
      id?: string | null;
      /**
       * Methodid
       * Format: uuid
       */
      methodId?: string;
      /** Checkout */
      checkout?: Record<string, never> | null;
      paymentMethod?: components["schemas"]["SessionPaymentMethod"] | null;
      /** Expirationat */
      expirationAt?: string | null;
      /** Createdat */
      createdAt?: string | null;
    };
    /**
     * PaymentState
     * @enum {string}
     */
    PaymentState: "awaiting" | "checkout" | "review" | "received" | "canceled" | "failed" | "refund" | "deleted";
    /** Point */
    Point: {
      /**
       * Lng
       * @example 55.296249
       */
      lng: number;
      /**
       * Lat
       * @example 25.276
       */
      lat: number;
      /**
       * Zoom
       * @default 17
       * @example 14
       */
      zoom?: number | null;
    };
    /** PointBase */
    PointBase: {
      /**
       * Lng
       * @example 55.296249
       */
      lng: number;
      /**
       * Lat
       * @example 25.276
       */
      lat: number;
    };
    /** ProfileFilling */
    ProfileFilling: {
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /** Availability */
      availability?: boolean | null;
      /** Avatar */
      avatar?: boolean | null;
      /** Certificates */
      certificates?: boolean | null;
      /** Description */
      description?: boolean | null;
      /** Experience */
      experience?: boolean | null;
      /** Images */
      images?: boolean | null;
      /** Languages */
      languages?: boolean | null;
      /** Locations */
      locations?: boolean | null;
      /** Media */
      media?: boolean | null;
      /** Services */
      services?: boolean | null;
      /** Faqs */
      faqs?: boolean | null;
      /**
       * Percentage
       * @default 0
       */
      percentage?: number | null;
    };
    /** PublicAddressOut */
    PublicAddressOut: {
      /** Lng */
      lng?: number;
      /** Lat */
      lat?: number;
      /**
       * Zoom
       * @default 17
       * @example 14
       */
      zoom?: number | null;
      /**
       * Address
       * @description Address
       * @example 548, floor 5, Cluster G, Tower Al mas, JLT, Dubai, UAE
       */
      address?: string | null;
      /**
       * Country
       * @description Country
       * @example United Arab Emirates
       */
      country?: string | null;
      /**
       * State
       * @description state
       * @example Dubai
       */
      state?: string | null;
      /**
       * City
       * @description city
       * @example Dubai
       */
      city?: string | null;
      /**
       * Line1
       * @description line1
       * @example Jumeirah Lake Towers
       */
      line1?: string | null;
      /**
       * Line2
       * @description line2
       * @example 1068, Tower Meadows 2
       */
      line2?: string | null;
      /**
       * Zip
       * @description zip (po box)
       */
      zip?: string | null;
      /**
       * Building
       * @description building
       * @example Tower Meadows 2
       */
      building?: string | null;
      /**
       * Entrance
       * @description entrance
       * @example main
       */
      entrance?: string | null;
      /**
       * Floor
       * @description floor
       * @example 12
       */
      floor?: string | null;
      /**
       * Apartment
       * @description apartment
       * @example 1245
       */
      apartment?: string | null;
      /**
       * Neighborhood
       * @description neighborhood
       */
      neighborhood?: string | null;
      /**
       * @description accommodation
       * @example any
       */
      accommodation?: components["schemas"]["Accommodations"] | null;
      /**
       * @description allergy
       * @example none
       */
      allergy?: components["schemas"]["UserAllergy"] | null;
      /**
       * Radius
       * @description Radius in meters
       * @example 10000
       */
      radius?: number | null;
      /**
       * Details
       * @description notes for address
       */
      details?: string | null;
      parking?: components["schemas"]["ParkingType"] | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Isdefault */
      isDefault?: boolean | null;
    };
    /** PublicBusinessProfile */
    PublicBusinessProfile: {
      /** Id */
      id?: string | null;
      /**
       * Categoryid
       * Format: uuid
       */
      categoryId?: string;
      /**
       * Displayname
       * @description User display name
       */
      displayName?: string | null;
      /** Avatar Url */
      avatar_url?: string | null;
      /** @default business */
      type?: components["schemas"]["UserType"] | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Description */
      description?: string | null;
      /**
       * Distance
       * @description Distance
       */
      distance?: number | null;
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /** Services */
      services?: components["schemas"]["ServiceOut"][] | null;
      /** Images */
      images?: components["schemas"]["PublicFileOut"][] | null;
      /** Videos */
      videos?: components["schemas"]["PublicFileOut"][] | null;
      /** Awards */
      awards?: components["schemas"]["AwardOut"][] | null;
      /** Certificates */
      certificates?: components["schemas"]["PublicCertificateFileOut"][] | null;
      /**
       * Allowbooking
       * @description User allowed to book this coach based on verification
       * @default false
       */
      allowBooking?: boolean;
      /** Favorite */
      favorite?: boolean | null;
      /** Boosted */
      boosted?: boolean | null;
      /** Availability */
      availability?: components["schemas"]["BusinessAvailabilityOut"][] | null;
      /** Features */
      features?: string[] | null;
      address?: components["schemas"]["PublicAddressOut"];
      /** Contacts */
      contacts?: components["schemas"]["BusinessContactIn"][] | null;
    };
    /** FileBase */
    PublicCertificateFileOut: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Contenttype */
      contentType?: string | null;
      /** Url */
      url?: string | null;
      /** Thumb */
      thumb?: string | null;
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /** Originfilename */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /** Duration */
      duration?: number | null;
      /** Issuedate */
      issueDate?: string | null;
      /** Expiredate */
      expireDate?: string | null;
    };
    /** PublicClientProfileOut */
    PublicClientProfileOut: {
      profile: components["schemas"]["PublicUserBaseInfo"];
      /** Reviews */
      reviews: components["schemas"]["SessionReviewOut"][];
      /**
       * Services
       * @default []
       */
      services?: components["schemas"]["ServiceOut"][];
      /**
       * Coaches
       * @default []
       */
      coaches?: components["schemas"]["SearchSessionFilteredOut"][];
      /**
       * Activesessions
       * @default []
       */
      activeSessions?: components["schemas"]["SessionOut"][];
      /**
       * Sessionhistory
       * @default []
       */
      sessionHistory?: components["schemas"]["SessionOut"][];
      analytics?: components["schemas"]["SessionInfoAnalyticsOut"] | null;
    };
    /** PublicCoachProfileOut */
    PublicCoachProfileOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description Experience in year
       * @default 1
       */
      experience?: number | null;
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Blocked
       * @default false
       */
      blocked?: boolean;
      /**
       * Distance
       * @description Distance
       */
      distance?: number | null;
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /** Services */
      services?: components["schemas"]["ServiceOut"][] | null;
      /** Images */
      images?: components["schemas"]["PublicFileOut"][] | null;
      /** Videos */
      videos?: components["schemas"]["PublicFileOut"][] | null;
      /** Awards */
      awards?: components["schemas"]["AwardOut"][] | null;
      /**
       * Faqs
       * @default []
       */
      faqs?: components["schemas"]["FAQOut"][];
      /**
       * Certificates
       * @default []
       */
      certificates?: components["schemas"]["CoachCertificateOut"][];
      /** Price */
      price?: number | null;
      /** Minprice */
      minPrice?: number | null;
      /** Maxprice */
      maxPrice?: number | null;
      /** Pricecurrency */
      priceCurrency?: string | null;
      /** Favorite */
      favorite?: boolean | null;
      /** Boosted */
      boosted?: boolean | null;
      /**
       * Allowbooking
       * @description User allowed to book this coach based on verification
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"];
    };
    /** PublicCoachShortProfileOut */
    PublicCoachShortProfileOut: {
      /**
       * Firstname
       * @description User first
       * @example John
       */
      firstName?: string | null;
      /**
       * Lastname
       * @description User last name
       * @example Smith
       */
      lastName?: string | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /** Rating */
      rating?: number | null;
    };
    /** FileBase */
    PublicFileOut: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Contenttype */
      contentType?: string | null;
      /** Url */
      url?: string | null;
      /** Thumb */
      thumb?: string | null;
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
      /** Originfilename */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /** Duration */
      duration?: number | null;
    };
    /** PublicReportOut */
    PublicReportOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Reason */
      reason: string;
      /** Description */
      description?: string | null;
    };
    /** PublicUserBaseInfo */
    PublicUserBaseInfo: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description User experience
       */
      experience?: number | null;
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Blocked
       * @default false
       */
      blocked?: boolean;
    };
    /** QuestionBusinessOut */
    QuestionBusinessOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /**
       * Username
       * @default Anonymous
       */
      username?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Displayname */
      displayName?: string | null;
    };
    /** QuestionCreateIn */
    QuestionCreateIn: {
      /** Message */
      message: string;
    };
    /** QuestionOut */
    QuestionOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Message */
      message: string;
      state: components["schemas"]["SessionReviewState"];
      user: components["schemas"]["SessionUserOut"];
      business: components["schemas"]["QuestionBusinessOut"];
      /**
       * Threads
       * @default []
       */
      threads?: components["schemas"]["QuestionThreadsOut"][];
    };
    /** QuestionThreadCreateIn */
    QuestionThreadCreateIn: {
      /** Message */
      message: string;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
    };
    /** QuestionThreadsOut */
    QuestionThreadsOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Message */
      message: string;
      state: components["schemas"]["SessionReviewState"];
      user: components["schemas"]["SessionUserOut"];
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["MediaFileOut"][];
    };
    /** QuestionUpdateIn */
    QuestionUpdateIn: {
      /** Message */
      message?: string | null;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
    };
    /** ReportNotificationOut */
    ReportNotificationOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Reason */
      reason: string;
      /** Description */
      description?: string | null;
      /** Sessionid */
      sessionId?: string | null;
      /**
       * Label
       * @default Assisted stretching session
       */
      label?: string | null;
      /** Refundamount */
      refundAmount?: number | null;
      /** Attachments */
      attachments?: string[] | null;
      role?: components["schemas"]["UserType"] | null;
      state?: components["schemas"]["ReportState"] | null;
      /**
       * Userid
       * Format: uuid
       */
      userId: string;
      session?: components["schemas"]["SessionNotificationOut"] | null;
      /**
       * Properties
       * @description Extra property for user
       * @example {
       *   "property_name": "property_value"
       * }
       */
      properties?: Record<string, never> | null;
    };
    /**
     * ReportState
     * @enum {string}
     */
    ReportState: "pending" | "approved" | "rejected" | "closed" | "deleted";
    /** RevenueChartDataOut */
    RevenueChartDataOut: {
      /** Revenue */
      revenue: number;
      /** Profit */
      profit: number;
      /** Refund */
      refund: number;
      /** Fees */
      fees: number;
      /** Currentdate */
      currentDate?: string | null;
      /** Year */
      year?: number | null;
    };
    /** SBChatConfigOut */
    SBChatConfigOut: {
      /** Accesstoken */
      accessToken?: string | null;
    };
    /** SearchClientOut */
    SearchClientOut: {
      /**
       * Clientid
       * Format: uuid
       * @description Client Id
       */
      clientId: string;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Phone */
      phone?: string | null;
      /** Email */
      email?: string | null;
      /** Rating */
      rating?: number | null;
      /** Reviewscount */
      reviewsCount?: number | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Type */
      type?: string | null;
      /** Verified */
      verified?: boolean | null;
      /** Chaturl */
      chatUrl?: string | null;
    };
    /** SearchCountOut */
    SearchCountOut: {
      /**
       * Total
       * @default 0
       */
      total?: number;
    };
    /** SearchFilterIn */
    SearchFilterIn: {
      /**
       * Page
       * @example 0
       */
      page?: number | null;
      /**
       * Limit
       * @example 20
       */
      limit?: number | null;
      type?: components["schemas"]["UserCoachType"] | null;
      /**
       * Gender
       * @description Gender or none
       */
      gender?: components["schemas"]["UserGender"] | components["schemas"]["UserGender"][] | null;
      /**
       * Languages
       * @description List of all possible languages
       */
      languages?: components["schemas"]["UserLanguages"][] | null;
      price?: components["schemas"]["SearchFilterPriceIn"] | null;
      session?: components["schemas"]["SearchFilterSessionIn"] | null;
      /**
       * Days
       * @description List of all possible days in current location
       */
      days?: components["schemas"]["UserDays"][] | null;
      /**
       * Time
       * @description List of all possible time in current location
       */
      time?: string[] | null;
      /**
       * Services
       * @description List of all possible service types
       */
      services?: string[] | null;
      /**
       * Onlybookable
       * @default true
       */
      onlyBookable?: boolean;
      direction?: components["schemas"]["SearchOrderDirection"] | null;
      order?: components["schemas"]["SearchOrder"] | null;
      /** Addressid */
      addressId?: string | null;
      /** Categoryid */
      categoryId?: string | null;
      /** Lng */
      lng?: number | null;
      /** Lat */
      lat?: number | null;
      /** Radius */
      radius?: number | null;
      /**
       * Text
       * @description open text entry, currently used for name searching
       */
      text?: string | null;
    };
    /** SearchFilterOut */
    SearchFilterOut: {
      /**
       * Type
       * @description List of all possible coach types
       * @default [
       *   "coach"
       * ]
       */
      type?: components["schemas"]["UserCoachType"][] | null;
      /**
       * Gender
       * @description List of all possible gender
       * @default [
       *   "male",
       *   "female",
       *   "transman",
       *   "transwoman"
       * ]
       */
      gender?: components["schemas"]["UserGender"][] | null;
      /**
       * Languages
       * @description List of all possible languages
       */
      languages?: components["schemas"]["SearchUserLanguage"][] | null;
      price?: components["schemas"]["SearchFilterPriceIn"] | null;
      session?: components["schemas"]["SearchFilterSessionIn"] | null;
      /**
       * Days
       * @description List of all possible days in current location
       * @default [
       *   "monday",
       *   "tuesday",
       *   "wednesday",
       *   "thursday",
       *   "friday",
       *   "saturday",
       *   "sunday"
       * ]
       */
      days?: components["schemas"]["UserDays"][] | null;
      /**
       * Time
       * @description List of all possible time in current location
       * @default [
       *   "morning",
       *   "day",
       *   "evening",
       *   "night"
       * ]
       */
      time?: components["schemas"]["UserTimeAvailable"][] | null;
      /**
       * Services
       * @description List of all possible service types
       */
      services?: string[] | null;
      /**
       * Onlybookable
       * @default true
       */
      onlyBookable?: boolean;
      /**
       * Direction
       * @default [
       *   "asc",
       *   "desc"
       * ]
       */
      direction?: components["schemas"]["SearchOrderDirection"][];
      /**
       * Order
       * @default [
       *   "distance",
       *   "price",
       *   "rating",
       *   "sessions",
       *   "boosted"
       * ]
       */
      order?: components["schemas"]["SearchOrder"][];
      /**
       * @default {
       *   "bounds": {
       *     "xMax": 0,
       *     "xMin": 0,
       *     "yMax": 0,
       *     "yMin": 0
       *   },
       *   "data": {
       *     "x": [],
       *     "y": []
       *   }
       * }
       */
      prices?: components["schemas"]["SearchFilterPriceChart"];
      /**
       * @default {
       *   "bounds": {
       *     "xMax": 0,
       *     "xMin": 0,
       *     "yMax": 0,
       *     "yMin": 0
       *   },
       *   "data": {
       *     "x": [],
       *     "y": []
       *   }
       * }
       */
      sessions?: components["schemas"]["SearchFilterPriceChart"];
    };
    /** SearchFilterPriceChart */
    SearchFilterPriceChart: {
      /**
       * @default {
       *   "xMin": 0,
       *   "xMax": 0,
       *   "yMin": 0,
       *   "yMax": 0
       * }
       */
      bounds?: components["schemas"]["SearchFilterPriceChartBounds"] | null;
      /**
       * @default {
       *   "x": [],
       *   "y": []
       * }
       */
      data?: components["schemas"]["SearchFilterPriceChartSeriesData"] | null;
    };
    /** SearchFilterPriceChartBounds */
    SearchFilterPriceChartBounds: {
      /**
       * Xmin
       * @default 0
       */
      xMin?: number;
      /**
       * Xmax
       * @default 0
       */
      xMax?: number;
      /**
       * Ymin
       * @default 0
       */
      yMin?: number;
      /**
       * Ymax
       * @default 0
       */
      yMax?: number;
    };
    /** SearchFilterPriceChartSeriesData */
    SearchFilterPriceChartSeriesData: {
      /**
       * X
       * @default []
       */
      x?: number[];
      /**
       * Y
       * @default []
       */
      y?: number[];
    };
    /** SearchFilterPriceIn */
    SearchFilterPriceIn: {
      /** Min */
      min?: number | null;
      /** Max */
      max?: number | null;
    };
    /** SearchFilterSessionIn */
    SearchFilterSessionIn: {
      /** Min */
      min?: number | null;
      /** Max */
      max?: number | null;
    };
    /**
     * SearchOrder
     * @enum {string}
     */
    SearchOrder: "distance" | "price" | "rating" | "sessions" | "boosted";
    /**
     * SearchOrderDirection
     * @enum {string}
     */
    SearchOrderDirection: "asc" | "desc";
    /** SearchOut */
    SearchOut: {
      /**
       * Coachid
       * Format: uuid
       * @description Coach Id
       */
      coachId: string;
      position?: components["schemas"]["Point"] | null;
      /** Distance */
      distance?: number | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Phone */
      phone?: string | null;
      /** Whatsapp */
      whatsapp?: string | null;
      /** Rating */
      rating?: number | null;
      /** Reviewscount */
      reviewsCount?: number | null;
      /** Experience */
      experience?: number | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Type */
      type?: string | null;
      /** Price */
      price?: number | null;
      /** Minprice */
      minPrice?: number | null;
      /** Maxprice */
      maxPrice?: number | null;
      /** Summary */
      summary?: string | null;
      /** Pricecurrency */
      priceCurrency?: string | null;
      /** Services */
      services?: number[] | string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /** Gallery */
      gallery?: components["schemas"]["MediaFileOut"][] | null;
      /** Verified */
      verified?: boolean | null;
      /** Sessioncount */
      sessionCount?: number | null;
      /**
       * Requiresparking
       * @description Requires parking
       */
      requiresParking?: boolean | null;
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /**
       * Languages
       * @description Languages
       */
      languages?: {
        [key: string]: string;
      } | null;
      /** Favorite */
      favorite?: boolean | null;
      /** Online */
      online?: boolean | null;
      /**
       * Allowbooking
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Disabled */
      disabled?: boolean | null;
      /**
       * Boosted
       * @description Promoted coach profiles
       */
      boosted?: boolean | null;
    };
    /** SearchSessionFilteredOut */
    SearchSessionFilteredOut: {
      /**
       * Coachid
       * Format: uuid
       * @description Coach Id
       */
      coachId: string;
      position?: components["schemas"]["Point"] | null;
      /** Distance */
      distance?: number | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Phone */
      phone?: string | null;
      /** Whatsapp */
      whatsapp?: string | null;
      /** Rating */
      rating?: number | null;
      /** Reviewscount */
      reviewsCount?: number | null;
      /** Experience */
      experience?: number | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      /** Type */
      type?: string | null;
      /** Price */
      price?: number | null;
      /** Minprice */
      minPrice?: number | null;
      /** Maxprice */
      maxPrice?: number | null;
      /** Summary */
      summary?: string | null;
      /** Pricecurrency */
      priceCurrency?: string | null;
      /** Services */
      services?: number[] | string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /** Gallery */
      gallery?: components["schemas"]["MediaFileOut"][] | null;
      /** Verified */
      verified?: boolean | null;
      /** Sessioncount */
      sessionCount?: number | null;
      /**
       * Requiresparking
       * @description Requires parking
       */
      requiresParking?: boolean | null;
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /**
       * Languages
       * @description Languages
       */
      languages?: {
        [key: string]: string;
      } | null;
      /** Favorite */
      favorite?: boolean | null;
      /** Online */
      online?: boolean | null;
      /**
       * Allowbooking
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Disabled */
      disabled?: boolean | null;
      /**
       * Boosted
       * @description Promoted coach profiles
       */
      boosted?: boolean | null;
    };
    /** SearchUserLanguage */
    SearchUserLanguage: {
      code: components["schemas"]["UserLanguages"];
      /** Name */
      name: string;
    };
    /**
     * ServiceAccommodation
     * @enum {string}
     */
    ServiceAccommodation: "indoor" | "outdoor" | "any";
    /** Service */
    ServiceDetailOut: {
      /** Id */
      id: string | null;
      /**
       * Name
       * @description This is a name of service
       */
      name: string;
      /** Description */
      description: (string | null) | null;
      /**
       * Promo
       * @default false
       */
      promo?: boolean | null;
      /**
       * Price
       * @example 199.9
       */
      price?: number | null;
      /**
       * Price Currency
       * @description aed: AED<br/>usd: USD<br/>eur: EUR
       * @default USD
       */
      priceCurrency?: components["schemas"]["stretchcore__models__service__service__ServicePriceCurrencies__1"];
      /** Service Other Type */
      serviceOtherType: (string | null) | null;
      /**
       * Session Minutes Duration
       * @description Duration session in minutes
       * @default 60
       */
      sessionMinutesDuration?: number;
      /**
       * Session Cancellation Hours
       * @description Session cancellation time before cancel
       * @default 8
       */
      sessionCancellationHours?: number;
      /**
       * Status
       * @description uploaded: uploaded<br/>processing: processing<br/>approved: approved<br/>rejected: rejected<br/>review: review<br/>draft: draft<br/>deleted: deleted
       * @default review
       */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"];
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /** Numberofsessions */
      numberOfSessions?: number | null;
      /** Expiresindays */
      expiresInDays?: number | null;
      /** Groupsession */
      groupSession?: boolean | null;
      /** Maxgroupsize */
      maxGroupSize?: number | null;
      /** Discount */
      discount?: number | null;
      /**
       * Prohibitrecording
       * @default true
       */
      prohibitRecording?: boolean;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @default 0
       * @example 0
       */
      reviewsCount?: number;
      /** @default any */
      accommodation?: components["schemas"]["ServiceAccommodation"];
      /** Slots */
      slots?: components["schemas"]["AvailabilityOut"][] | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /** Coachid */
      coachId?: string | null;
      /**
       * Allowbooking
       * @description User allowed to book with this coach on this service
       */
      allowBooking?: boolean | null;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Equipmenttitles */
      equipmentTitles?: string[] | null;
      user?: components["schemas"]["PublicCoachShortProfileOut"] | null;
      /** Equipments */
      equipments?: components["schemas"]["EquipmentOut"][] | null;
    };
    /** ServiceIn */
    ServiceIn: {
      /**
       * Name
       * @example My first stretching session
       */
      name: string;
      /**
       * Description
       * @example My session description
       */
      description?: string | null;
      /**
       * Servicetypes
       * @example [
       *   "Static Stretching",
       *   "Active Stretching",
       *   "My Private Stretching"
       * ]
       */
      serviceTypes: (string | number)[];
      /** Equipments */
      equipments?: string[] | null;
      /** Serviceothertype */
      serviceOtherType?: string | null;
      /**
       * Numberofsessions
       * @description Session count in this package
       * @default 1
       * @example 1
       */
      numberOfSessions?: number;
      /**
       * Expiresindays
       * @description Session day availability in this service
       * @default 31
       * @example 31
       */
      expiresInDays?: number;
      /**
       * Sessioncancellationhours
       * @description Session cancellation time before cancel
       * @default 6
       * @example 6
       */
      sessionCancellationHours?: number | null;
      /**
       * Sessionminutesduration
       * @description Session duration
       * @default 60
       * @example 60
       */
      sessionMinutesDuration?: number;
      /**
       * Promo
       * @default false
       */
      promo?: boolean;
      /**
       * Price
       * @example 199.9
       */
      price: number;
      /**
       * Discount
       * @example 0
       */
      discount?: number | null;
      /**
       * Prohibitrecording
       * @default false
       */
      prohibitRecording?: boolean;
      /** @default any */
      accommodation?: components["schemas"]["ServiceAccommodation"];
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropIn"][] | null;
      /** @example AED */
      priceCurrency: components["schemas"]["ServicePriceCurrencies-Input"];
      /**
       * Groupsession
       * @default false
       * @example true
       */
      groupSession?: boolean | null;
      /**
       * Maxgroupsize
       * @example 10
       */
      maxGroupSize?: number | null;
      /** Slots */
      slots?: components["schemas"]["AvailabilityServiceIn"][] | null;
    };
    /** ServiceOrderIn */
    ServiceOrderIn: {
      /**
       * Order
       * @default []
       */
      order?: string[];
    };
    /** Service */
    ServiceOut: {
      /** Id */
      id: string | null;
      /**
       * Name
       * @description This is a name of service
       */
      name: string;
      /** Description */
      description: (string | null) | null;
      /**
       * Promo
       * @default false
       */
      promo?: boolean | null;
      /**
       * Price
       * @example 199.9
       */
      price?: number | null;
      /**
       * Price Currency
       * @description aed: AED<br/>usd: USD<br/>eur: EUR
       * @default USD
       */
      priceCurrency?: components["schemas"]["stretchcore__models__service__service__ServicePriceCurrencies__1"];
      /** Service Other Type */
      serviceOtherType: (string | null) | null;
      /**
       * Session Minutes Duration
       * @description Duration session in minutes
       * @default 60
       */
      sessionMinutesDuration?: number;
      /**
       * Session Cancellation Hours
       * @description Session cancellation time before cancel
       * @default 8
       */
      sessionCancellationHours?: number;
      /**
       * Status
       * @description uploaded: uploaded<br/>processing: processing<br/>approved: approved<br/>rejected: rejected<br/>review: review<br/>draft: draft<br/>deleted: deleted
       * @default review
       */
      status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"];
      /** Servicetypes */
      serviceTypes?: string[] | null;
      /** Numberofsessions */
      numberOfSessions?: number | null;
      /** Expiresindays */
      expiresInDays?: number | null;
      /** Groupsession */
      groupSession?: boolean | null;
      /** Maxgroupsize */
      maxGroupSize?: number | null;
      /** Discount */
      discount?: number | null;
      /**
       * Prohibitrecording
       * @default true
       */
      prohibitRecording?: boolean;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @default 0
       * @example 0
       */
      reviewsCount?: number;
      /** @default any */
      accommodation?: components["schemas"]["ServiceAccommodation"];
      /** Slots */
      slots?: components["schemas"]["AvailabilityOut"][] | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /** Coachid */
      coachId?: string | null;
      /**
       * Allowbooking
       * @description User allowed to book with this coach on this service
       */
      allowBooking?: boolean | null;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Equipmenttitles */
      equipmentTitles?: string[] | null;
    };
    /**
     * ServicePriceCurrencies
     * @enum {string}
     */
    "ServicePriceCurrencies-Input": "AED" | "USD" | "EUR";
    /** ServiceType */
    ServiceTypeOut: {
      /**
       * Name
       * @description This is a name of service
       */
      name: string;
      /** Description */
      description: (string | null) | null;
    };
    /** ServiceUpdateIn */
    ServiceUpdateIn: {
      /**
       * Name
       * @example Update name first session
       */
      name?: string | null;
      /**
       * Description
       * @example Update description of session
       */
      description?: string | null;
      /**
       * Servicetypes
       * @example [
       *   "Active Stretching",
       *   "Static Stretching"
       * ]
       */
      serviceTypes?: string[] | null;
      /** Equipments */
      equipments?: string[] | null;
      /** Serviceothertype */
      serviceOtherType?: string | null;
      /**
       * Numberofsessions
       * @description Session count in this package
       * @default 1
       * @example 1
       */
      numberOfSessions?: number;
      /**
       * Expiresindays
       * @example 14
       */
      expiresInDays?: number | null;
      /**
       * Sessioncancellationhours
       * @description Session cancellation time before cancel
       * @default 6
       * @example 6
       */
      sessionCancellationHours?: number | null;
      /**
       * Sessionminutesduration
       * @example 60
       */
      sessionMinutesDuration?: number | null;
      /**
       * Promo
       * @example Update promo of session
       */
      promo?: boolean | null;
      /**
       * Price
       * @example 200.5
       */
      price?: number | null;
      /**
       * Discount
       * @example 0
       */
      discount?: number | null;
      /** Prohibitrecording */
      prohibitRecording?: boolean | null;
      /** @example any */
      accommodation?: components["schemas"]["ServiceAccommodation"] | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropIn"][] | null;
      priceCurrency?: components["schemas"]["ServicePriceCurrencies-Input"] | null;
      /**
       * Groupsession
       * @default false
       * @example true
       */
      groupSession?: boolean | null;
      /**
       * Maxgroupsize
       * @example 10
       */
      maxGroupSize?: number | null;
      /** Slots */
      slots?: components["schemas"]["AvailabilityServiceIn"][] | null;
    };
    /** SessionBookingIn */
    SessionBookingIn: {
      /**
       * Date
       * Format: date-time
       */
      date?: string;
      /** Orderdescription */
      orderDescription?: string | null;
    };
    /** SessionCancellationDetails */
    SessionCancellationDetails: {
      /**
       * Reason
       * @description Description for report
       * @example Problem with session
       */
      reason?: string | null;
      /**
       * Description
       * @description Reason for report
       * @example Technical problem
       */
      description?: string | null;
      /** Refundamount */
      refundAmount?: number | null;
      source?: components["schemas"]["SessionCancellationSource"] | null;
    };
    /**
     * SessionCancellationSource
     * @enum {string}
     */
    SessionCancellationSource: "client" | "coach" | "admin";
    /** SessionCreateIn */
    SessionCreateIn: {
      /**
       * Slots
       * @description Availability date for create
       * @example [
       *   {
       *     "date": "2024-05-20T07:53:35.126467",
       *     "orderDescription": "Order description"
       *   }
       * ]
       */
      slots: string | components["schemas"]["SessionBookingIn"][];
      location?: components["schemas"]["AddressSessionIn"] | null;
      /**
       * Addressid
       * @deprecated
       * @description Address ID for coach
       */
      addressId?: string | null;
      /** @deprecated */
      position?: components["schemas"]["PointBase"] | null;
      /**
       * Address
       * @deprecated
       */
      address?: string | null;
      /** Orderdescription */
      orderDescription?: string | string[] | null;
      /**
       * Method
       * @default card
       * @example card
       */
      method?: string | null;
    };
    /** SessionDetailsOut */
    SessionDetailsOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Datestart
       * Format: date-time
       */
      dateStart: string;
      /**
       * Dateend
       * Format: date-time
       */
      dateEnd: string;
      /**
       * Expirationdate
       * @example 01/01/2023
       */
      expirationDate?: string | null;
      state: components["schemas"]["SessionState"];
      /** Price */
      price: number;
      /**
       * Currency
       * @default USD
       */
      currency?: string;
      /** Discount */
      discount?: number | null;
      /** Promo */
      promo?: boolean | null;
      /**
       * Cancellationfee
       * @default 0
       * @example 0
       */
      cancellationFee?: number;
      /**
       * Cancellationhours
       * @default 24
       * @example 0
       */
      cancellationHours?: number;
      /**
       * Minutesduration
       * @example 0
       */
      minutesDuration?: number;
      /**
       * Minutestravel
       * @example 0
       */
      minutesTravel?: number;
      /**
       * Dayavailability
       * @example 0
       */
      dayAvailability?: number;
      /** Parking */
      parking?: string | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Orderdescription */
      orderDescription?: string | null;
      /** Dategap */
      dateGap?: string | null;
      /**
       * Paymentid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      paymentId?: string | null;
      /**
       * Coachid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      coachId?: string | null;
      /**
       * Clientid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      clientId?: string | null;
      /**
       * Serviceid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      serviceId?: string | null;
      /**
       * Addressid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      addressId?: string | null;
      /**
       * Clientaddress
       * @deprecated
       * @example Digital Asset Business Center, Retail N 5-A - Cluster N
       */
      clientAddress?: string | null;
      /**
       * @deprecated
       * @example Jumeirah Lake Towers - Dubai
       */
      clientLocation?: components["schemas"]["PointBase"] | null;
      location: components["schemas"]["AddressSessionOut"];
      /**
       * Groupid
       * Format: uuid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      groupId: string;
      /** @example Active */
      paymentState?: components["schemas"]["PaymentState"] | null;
      /**
       * Paymentexpirationat
       * @example 01/01/2023
       */
      paymentExpirationAt?: string | null;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /**
       * Modifiedat
       * Format: date-time
       */
      modifiedAt: string;
      client?: components["schemas"]["ClientDetails"] | null;
      coach?: components["schemas"]["CoachDetails"] | null;
      /**
       * Coachreview
       * @default false
       */
      coachReview?: boolean;
      /**
       * Clientreview
       * @default false
       */
      clientReview?: boolean;
      /** Updatedbyuserid */
      updatedByUserId?: string | null;
      /** Directionid */
      directionId?: string | null;
      payment?: components["schemas"]["PaymentSessionOut"] | null;
      /**
       * Properties
       * @description Extra property for user
       * @example {
       *   "property_name": "property_value"
       * }
       */
      properties?: Record<string, never> | null;
      /**
       * Allowbooking
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      report?: components["schemas"]["PublicReportOut"] | null;
      /** Reviews */
      reviews?: components["schemas"]["SessionReviewOut"][] | null;
      /**
       * Cancellationpolicy
       * @default You can cancel a session at no cost if done more than 24 hours before the scheduled time. Cancelling within 24 hours incurs a 50% charge, and cancellations within 1 hour result in the full session cost.
       */
      cancellationPolicy?: string | null;
      /**
       * Prohibitrecording
       * @default true
       */
      prohibitRecording?: boolean;
      /** @default any */
      accommodation?: components["schemas"]["ServiceAccommodation"];
      /**
       * Servicetypes
       * @default []
       */
      serviceTypes?: string[];
    };
    /** SessionDropIn */
    SessionDropIn: {
      /**
       * Reason
       * @description Description for report
       * @example Problem with session
       */
      reason?: string | null;
      /**
       * Description
       * @description Reason for report
       * @example Technical problem
       */
      description?: string | null;
      /** Refundamount */
      refundAmount?: number | null;
    };
    /**
     * SessionFilterState
     * @enum {string}
     */
    SessionFilterState: "all" | "new" | "active" | "awaiting" | "settled";
    /** SessionInfoAnalyticsOut */
    SessionInfoAnalyticsOut: {
      /**
       * Comparefrom
       * @description Comparison from date
       */
      compareFrom?: string | null;
      /**
       * Compareto
       * @description Comparison to date
       */
      compareTo?: string | null;
      /** Booked */
      booked: number;
      /** Bookedpercentage */
      bookedPercentage?: number | null;
      /** Completed */
      completed: number;
      /** Completedpercentage */
      completedPercentage?: number | null;
      /** Canceled */
      canceled: number;
      /** Canceledpercentage */
      canceledPercentage?: number | null;
      /** Reported */
      reported: number;
      /** Reportedpercentage */
      reportedPercentage?: number | null;
      /** Resolved */
      resolved: number;
      /** Resolvedpercentage */
      resolvedPercentage?: number | null;
      /** Refunded */
      refunded: number;
      /** Refundedpercentage */
      refundedPercentage?: number | null;
      /** Average */
      average?: number | null;
      /** Averagepercentage */
      averagePercentage?: number | null;
      /** Upcoming */
      upcoming?: number | null;
      /** Upcomingpercentage */
      upcomingPercentage?: number | null;
      /**
       * Currency
       * @default AED
       */
      currency?: string | null;
    };
    /** SessionMessageIn */
    SessionMessageIn: {
      /**
       * Message
       * @example This session was very good!
       */
      message: string;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
    };
    /** SessionNotificationOut */
    SessionNotificationOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Datestart
       * Format: date-time
       */
      dateStart: string;
      /**
       * Dateend
       * Format: date-time
       */
      dateEnd: string;
      /**
       * Expirationdate
       * @example 01/01/2023
       */
      expirationDate?: string | null;
      state: components["schemas"]["SessionState"];
      /** Price */
      price: number;
      /**
       * Currency
       * @default USD
       */
      currency?: string;
      /** Discount */
      discount?: number | null;
      /** Promo */
      promo?: boolean | null;
      /**
       * Cancellationfee
       * @default 0
       * @example 0
       */
      cancellationFee?: number;
      /**
       * Cancellationhours
       * @default 24
       * @example 0
       */
      cancellationHours?: number;
      /**
       * Minutesduration
       * @example 0
       */
      minutesDuration?: number;
      /**
       * Minutestravel
       * @example 0
       */
      minutesTravel?: number;
      /**
       * Dayavailability
       * @example 0
       */
      dayAvailability?: number;
      /** Parking */
      parking?: string | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Orderdescription */
      orderDescription?: string | null;
      /** Dategap */
      dateGap?: string | null;
      /**
       * Paymentid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      paymentId?: string | null;
      /**
       * Coachid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      coachId?: string | null;
      /**
       * Clientid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      clientId?: string | null;
      /**
       * Serviceid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      serviceId?: string | null;
      /**
       * Addressid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      addressId?: string | null;
      /**
       * Clientaddress
       * @deprecated
       * @example Digital Asset Business Center, Retail N 5-A - Cluster N
       */
      clientAddress?: string | null;
      /**
       * @deprecated
       * @example Jumeirah Lake Towers - Dubai
       */
      clientLocation?: components["schemas"]["PointBase"] | null;
      location?: components["schemas"]["AddressOut"] | null;
      /**
       * Groupid
       * Format: uuid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      groupId: string;
      /** @example Active */
      paymentState?: components["schemas"]["PaymentState"] | null;
      /**
       * Paymentexpirationat
       * @example 01/01/2023
       */
      paymentExpirationAt?: string | null;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /**
       * Modifiedat
       * Format: date-time
       */
      modifiedAt: string;
      client?: components["schemas"]["ClientDetails"] | null;
      coach?: components["schemas"]["CoachDetails"] | null;
      /**
       * Coachreview
       * @default false
       */
      coachReview?: boolean;
      /**
       * Clientreview
       * @default false
       */
      clientReview?: boolean;
      /** Updatedbyuserid */
      updatedByUserId?: string | null;
      /** Directionid */
      directionId?: string | null;
      payment?: components["schemas"]["PaymentSessionOut"] | null;
      /**
       * Properties
       * @description Extra property for user
       * @example {
       *   "property_name": "property_value"
       * }
       */
      properties?: Record<string, never> | null;
      /**
       * Allowbooking
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      report?: components["schemas"]["PublicReportOut"] | null;
      /** Dategroup */
      dateGroup?: Record<string, never>[] | null;
      /**
       * Numberofgroupedsessions
       * @default 1
       */
      numberOfGroupedSessions?: number;
      /** @default {} */
      cancellationDetails?: components["schemas"]["SessionCancellationDetails"];
      /** Payload */
      payload?: Record<string, never> | null;
    };
    /** SessionOut */
    SessionOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Datestart
       * Format: date-time
       */
      dateStart: string;
      /**
       * Dateend
       * Format: date-time
       */
      dateEnd: string;
      /**
       * Expirationdate
       * @example 01/01/2023
       */
      expirationDate?: string | null;
      state: components["schemas"]["SessionState"];
      /** Price */
      price: number;
      /**
       * Currency
       * @default USD
       */
      currency?: string;
      /** Discount */
      discount?: number | null;
      /** Promo */
      promo?: boolean | null;
      /**
       * Cancellationfee
       * @default 0
       * @example 0
       */
      cancellationFee?: number;
      /**
       * Cancellationhours
       * @default 24
       * @example 0
       */
      cancellationHours?: number;
      /**
       * Minutesduration
       * @example 0
       */
      minutesDuration?: number;
      /**
       * Minutestravel
       * @example 0
       */
      minutesTravel?: number;
      /**
       * Dayavailability
       * @example 0
       */
      dayAvailability?: number;
      /** Parking */
      parking?: string | null;
      /** Parkingdescription */
      parkingDescription?: string | null;
      /** Orderdescription */
      orderDescription?: string | null;
      /** Dategap */
      dateGap?: string | null;
      /**
       * Paymentid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      paymentId?: string | null;
      /**
       * Coachid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      coachId?: string | null;
      /**
       * Clientid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      clientId?: string | null;
      /**
       * Serviceid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      serviceId?: string | null;
      /**
       * Addressid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      addressId?: string | null;
      /**
       * Clientaddress
       * @deprecated
       * @example Digital Asset Business Center, Retail N 5-A - Cluster N
       */
      clientAddress?: string | null;
      /**
       * @deprecated
       * @example Jumeirah Lake Towers - Dubai
       */
      clientLocation?: components["schemas"]["PointBase"] | null;
      location?: components["schemas"]["AddressOut"] | null;
      /**
       * Groupid
       * Format: uuid
       * @example c546cd53-1516-4290-8a1b-780a1e9816c9
       */
      groupId: string;
      /** @example Active */
      paymentState?: components["schemas"]["PaymentState"] | null;
      /**
       * Paymentexpirationat
       * @example 01/01/2023
       */
      paymentExpirationAt?: string | null;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /**
       * Modifiedat
       * Format: date-time
       */
      modifiedAt: string;
      client?: components["schemas"]["ClientDetails"] | null;
      coach?: components["schemas"]["CoachDetails"] | null;
      /**
       * Coachreview
       * @default false
       */
      coachReview?: boolean;
      /**
       * Clientreview
       * @default false
       */
      clientReview?: boolean;
      /** Updatedbyuserid */
      updatedByUserId?: string | null;
      /** Directionid */
      directionId?: string | null;
      payment?: components["schemas"]["PaymentSessionOut"] | null;
      /**
       * Properties
       * @description Extra property for user
       * @example {
       *   "property_name": "property_value"
       * }
       */
      properties?: Record<string, never> | null;
      /**
       * Allowbooking
       * @default true
       */
      allowBooking?: boolean;
      bookingReason?: components["schemas"]["BookingReasonOut"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      report?: components["schemas"]["PublicReportOut"] | null;
    };
    /** SessionPaymentMethod */
    SessionPaymentMethod: {
      /** Brand */
      brand?: string | null;
      /** Last4 */
      last4?: string | null;
      /** Type */
      type?: string | null;
    };
    /** SessionReviewBaseOut */
    SessionReviewBaseOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
      /** Message */
      message?: string;
      /** State */
      state?: string | null;
      user?: components["schemas"]["SessionUserOut"] | null;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["MediaFileOut"][];
    };
    /** SessionReviewIn */
    SessionReviewIn: {
      /**
       * Message
       * @example This session was very good!
       */
      message: string;
      /**
       * Attachmentids
       * @default []
       */
      attachmentIds?: string[];
      /**
       * Rating
       * @example 5
       */
      rating?: number | null;
    };
    /** SessionReviewInfoOut */
    SessionReviewInfoOut: {
      /**
       * Reviewscount
       * @default 0
       */
      reviewsCount?: number | null;
      /** Reviewspercentage */
      reviewsPercentage?: number | null;
      /**
       * Rating
       * @default 0
       */
      rating?: number | null;
      /** Ratingpercentage */
      ratingPercentage?: number | null;
      /**
       * Ratingsummary
       * @default {
       *   "1": 0,
       *   "2": 0,
       *   "3": 0,
       *   "4": 0,
       *   "5": 0
       * }
       */
      ratingSummary?: {
        [key: string]: number;
      } | null;
    };
    /** SessionReviewOut */
    SessionReviewOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt?: string;
      /** Message */
      message?: string;
      /** State */
      state?: string | null;
      user?: components["schemas"]["SessionUserOut"] | null;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["MediaFileOut"][];
      /** Label */
      label?: string | null;
      /** Rating */
      rating?: number | null;
      /**
       * Sessionid
       * Format: uuid
       */
      sessionId?: string;
      /** Sessionname */
      sessionName?: string;
      /**
       * Threads
       * @default []
       */
      threads?: components["schemas"]["SessionReviewBaseOut"][];
    };
    /**
     * SessionReviewState
     * @enum {string}
     */
    SessionReviewState: "approved" | "cancel" | "review" | "claim" | "deleted" | "hidden";
    /**
     * SessionState
     * @enum {string}
     */
    SessionState: "new" | "pending" | "updated_by_client" | "updated_by_coach" | "approved" | "canceled" | "upcoming" | "progress" | "refund_request" | "refund_approved" | "refund_rejected" | "completed" | "deleted" | "paid";
    /** SessionUpdateIn */
    SessionUpdateIn: {
      /**
       * Date
       * Format: date-time
       * @description Availability time for update
       */
      date?: string;
      /** Orderdescription */
      orderDescription?: string | null;
      location?: components["schemas"]["AddressSessionIn"] | null;
    };
    /** SessionUserOut */
    SessionUserOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /**
       * Username
       * @default Anonymous
       */
      username?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
    };
    /** SessionsBookingOut */
    SessionsBookingOut: {
      /**
       * Slots
       * @description Availability date for create
       * @example 2024-05-20T07:53:35.750576
       */
      slots: string | components["schemas"]["SessionBookingIn"][];
      location?: components["schemas"]["AddressSessionOut"] | null;
      /**
       * Cancellationpolicy
       * @default No cancellation
       * @example card
       */
      cancellationPolicy?: string;
      /**
       * @default {
       *   "name": "card",
       *   "default": false,
       *   "method": "card",
       *   "type": "standard"
       * }
       */
      defaultPaymentMethod?: components["schemas"]["PaymentMethodOut"];
      /**
       * Paymentmethods
       * @default [
       *   {
       *     "name": "card",
       *     "default": false,
       *     "method": "card",
       *     "type": "standard"
       *   }
       * ]
       */
      paymentMethods?: components["schemas"]["PaymentMethodOut"][];
    };
    /** StretchResponse */
    StretchResponse: {
      /**
       * Status
       * @description Stretch status response
       * @default success
       */
      status?: string;
    };
    /**
     * StripeConnectStatus
     * @enum {string}
     */
    StripeConnectStatus: "unregistered" | "completed" | "pending" | "unverified";
    /** TotalRevenueAnalyticsOut */
    TotalRevenueAnalyticsOut: {
      /**
       * Comparefrom
       * @description Comparison from date
       */
      compareFrom?: string | null;
      /**
       * Compareto
       * @description Comparison to date
       */
      compareTo?: string | null;
      /** Revenue */
      revenue: number;
      /** Revenuepercentage */
      revenuePercentage?: number | null;
      /** Profit */
      profit: number;
      /** Profitpercentage */
      profitPercentage?: number | null;
      /** Refund */
      refund: number;
      /** Refundpercentage */
      refundPercentage?: number | null;
      /** Fees */
      fees: number;
      /** Feespercentage */
      feesPercentage?: number | null;
      /** Balance */
      balance?: number | null;
      /** Balancepercentage */
      balancePercentage?: number | null;
      /** @default AED */
      currency?: components["schemas"]["CurrencyCode"] | null;
    };
    /**
     * TransactionType
     * @enum {string}
     */
    TransactionType: "income" | "outcome" | "withdrawal";
    /**
     * UserAllergy
     * @enum {string}
     */
    UserAllergy: "none" | "cat" | "dog" | "all";
    /**
     * UserCoachType
     * @enum {string}
     */
    UserCoachType: "coach" | "studio" | "business";
    /** UserConfigOut */
    UserConfigOut: {
      type?: components["schemas"]["UserType"];
      config?: components["schemas"]["AppConfigOut"];
      notification?: components["schemas"]["NotificationStatus"];
      profile?: components["schemas"]["UserProfileOut"];
      location?: components["schemas"]["AddressOut"] | null;
      filter?: components["schemas"]["SearchFilterOut"];
      promo?: components["schemas"]["UserPromoOut"] | null;
      /**
       * Unpaidsessions
       * @default []
       */
      unpaidSessions?: components["schemas"]["SessionOut"][] | null;
      /** @default {} */
      chat?: components["schemas"]["SBChatConfigOut"];
    };
    /**
     * UserDays
     * @enum {string}
     */
    UserDays: "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday";
    /**
     * UserGender
     * @enum {string}
     */
    UserGender: "male" | "female" | "transman" | "transwoman";
    /**
     * UserLanguages
     * @enum {string}
     */
    UserLanguages: "ab" | "aa" | "af" | "ak" | "sq" | "am" | "ar" | "an" | "hy" | "as" | "av" | "ae" | "ay" | "az" | "bm" | "ba" | "eu" | "be" | "bn" | "bh" | "bi" | "bs" | "br" | "bg" | "my" | "ca" | "ch" | "ce" | "ny" | "zh" | "cv" | "kw" | "co" | "cr" | "hr" | "cs" | "da" | "dv" | "nl" | "dz" | "en" | "eo" | "et" | "ee" | "fo" | "fj" | "fi" | "fr" | "ff" | "gl" | "ka" | "de" | "el" | "gn" | "gu" | "ht" | "ha" | "he" | "hz" | "hi" | "ho" | "hu" | "ia" | "id" | "ie" | "ga" | "ig" | "ik" | "io" | "is" | "it" | "iu" | "ja" | "jv" | "kl" | "kn" | "kr" | "ks" | "kk" | "km" | "ki" | "rw" | "ky" | "kv" | "kg" | "ko" | "ku" | "kj" | "la" | "lb" | "lg" | "li" | "ln" | "lo" | "lt" | "lu" | "lv" | "gv" | "mk" | "mg" | "ms" | "ml" | "mt" | "mi" | "mr" | "mh" | "mn" | "na" | "nv" | "nd" | "ne" | "ng" | "nb" | "nn" | "no" | "ii" | "nr" | "oc" | "oj" | "cu" | "om" | "or" | "os" | "pa" | "pi" | "fa" | "pl" | "ps" | "pt" | "qu" | "rm" | "rn" | "ro" | "ru" | "sa" | "sc" | "sd" | "se" | "sm" | "sg" | "sr" | "gd" | "sn" | "si" | "sk" | "sl" | "so" | "st" | "es" | "su" | "sw" | "ss" | "sv" | "ta" | "te" | "tg" | "th" | "ti" | "bo" | "tk" | "tl" | "tn" | "to" | "tr" | "ts" | "tt" | "tw" | "ty" | "ug" | "uk" | "ur" | "uz" | "ve" | "vi" | "vo" | "wa" | "cy" | "wo" | "fy" | "xh" | "yi" | "yo" | "za" | "zu";
    /** UserNotesOut */
    UserNotesOut: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Modifiedat
       * Format: date-time
       */
      modifiedAt: string;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
    };
    /** UserProfileOut */
    UserProfileOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName?: string | null;
      /** Lastname */
      lastName?: string | null;
      /** Avatarurl */
      avatarUrl?: string | null;
      type?: components["schemas"]["UserType"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description User experience
       */
      experience?: number | null;
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Blocked
       * @default false
       */
      blocked?: boolean;
      /**
       * Username
       * @description Username input
       */
      username?: string | null;
      /**
       * Email
       * @description Email format
       * @example info@stretch.com
       */
      email?: string | null;
      /**
       * Timezone
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      timezone?: string | null;
      /**
       * Birthdate
       * @description User Birth date
       * @example 2000-07-08
       */
      birthDate?: string | null;
      /** @description User balance */
      balance?: components["schemas"]["BalanceOut"] | null;
      /**
       * Verifiedphone
       * @description Phone verification
       */
      verifiedPhone?: boolean | null;
      /**
       * Verifiedemail
       * @description Email verification
       */
      verifiedEmail?: boolean | null;
      /**
       * Available
       * @description Availability
       */
      available?: boolean | null;
      /** Verifycode */
      verifyCode?: string | null;
      /**
       * Totalpayment
       * @description Total payment amount
       */
      totalPayment?: number | null;
      /**
       * Totalpaymentcurrency
       * @description Payment currency
       */
      totalPaymentCurrency?: string | null;
      /**
       * Publicviewallowed
       * @description client only, allow clients to view profile?
       * @example false
       */
      publicViewAllowed?: boolean | null;
      /** @description Profile picture completion status */
      profileCompletion?: components["schemas"]["ProfileFilling"] | null;
      /**
       * Sbaccesstoken
       * @description Access token for sendbird registration
       */
      sbAccessToken?: string | null;
    };
    /** UserPromoOut */
    UserPromoOut: {
      /** Price */
      price: number;
      /** Message */
      message: string;
      /** @default boosted */
      type?: components["schemas"]["UserPromoType"] | null;
      /**
       * Enabled
       * @default true
       */
      enabled?: boolean | null;
      /** Startdate */
      startDate?: string | null;
      /** Expirydate */
      expiryDate?: string | null;
    };
    /**
     * UserPromoType
     * @constant
     */
    UserPromoType: "boosted";
    /** UserPropIn */
    UserPropIn: {
      /** Name */
      name: string;
      /** Value */
      value?: string | number | boolean | null;
    };
    /** UserPropOut */
    UserPropOut: {
      /** Name */
      name: string;
      /** Value */
      value?: string | number | boolean | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Type */
      type: string | null;
      /** Options */
      options?: {
        [key: string]: string;
      } | null;
    };
    /** UserPropertyFieldOut */
    UserPropertyFieldOut: {
      /** Name */
      name?: string;
      type?: components["schemas"]["UserPropertyType"];
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Default */
      default?: unknown;
      /** Options */
      options?: {
        [key: string]: string;
      } | null;
    };
    /**
     * UserPropertyType
     * @enum {string}
     */
    UserPropertyType: "empty" | "id" | "int" | "bool" | "float" | "str" | "list" | "dict" | "select" | "radio" | "datetime";
    /**
     * UserTimeAvailable
     * @enum {string}
     */
    UserTimeAvailable: "morning" | "day" | "evening" | "night";
    /**
     * UserType
     * @enum {string}
     */
    UserType: "guest" | "coach" | "client" | "studio" | "business" | "support" | "admin";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WeeklyOut */
    WeeklyOut: {
      /** Availability */
      availability?: components["schemas"]["AvailabilityOut"][] | null;
      /** Unavailability */
      unavailability?: components["schemas"]["AvailabilityOut"][] | null;
      /** @example none */
      slotType?: components["schemas"]["AvailabilityType"] | null;
    };
    /**
     * ServicePriceCurrencies
     * @enum {string}
     */
    stretchcore__models__service__service__ServicePriceCurrencies__1: "AED" | "USD" | "EUR";
    stretchcore__models__service__service__ServicePriceCurrencies__2: components["schemas"]["stretchcore__models__service__service__ServicePriceCurrencies__1"];
    /**
     * FileStatus
     * @enum {string}
     */
    stretchcore__models__storage__file__FileStatus__1: "uploaded" | "processing" | "approved" | "rejected" | "review" | "draft" | "deleted";
    stretchcore__models__storage__file__FileStatus__2: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Adv Search Coach Services */
  adv_search_coach_services_api_v1_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchFilterIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Adv Search Coach Counts */
  adv_search_coach_counts_api_v1_search_count_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchFilterIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchCountOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Coach Filter
   * @description Filters out the coach information using the search query made by the user.
   */
  search_coach_filter_api_v1_search_filter_get: {
    parameters: {
      query?: {
        addressId?: string | null;
        categoryId?: string | null;
        lng?: number | null;
        lat?: number | null;
        radius?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchFilterOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Service Types
   * @description Gets the type of service or the category of a chosen service.
   */
  get_service_types_api_v1_servicetypes_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceTypeOut"][];
        };
      };
    };
  };
  /**
   * Get Availability Service
   * @description Gets the available time in UTC for some service
   * for a given client and returns the details for all available service and
   * uses the following parameters:
   *
   * - service_id *required
   * - address_id *optional
   * - lat, lng *optional
   * - from_date *optional
   * - to_date *optional
   */
  get_availability_service_api_v1_service__service_id__availability_post: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailabilityClientIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AvailabilityClientOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Check Booking Sessions
   * @description Creates a service session using the session id and data to store a description about the session.
   * The date and time of the session is also taken into consideration and displayed as a final result.
   */
  check_booking_sessions_api_v1_service__service_id__check_post: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionsBookingOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Service */
  get_service_api_v1_service__service_id__get: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Booking Sessions
   * @description Creates a service session using the session id and data to store a description about the session.
   * The date and time of the session is also taken into consideration and displayed as a final result.
   */
  create_booking_sessions_api_v1_service__service_id__post: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Service Reviews */
  service_reviews_api_v1_service__service_id__reviews_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
      path: {
        service_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Service Reviews Info */
  service_reviews_info_api_v1_service__service_id__reviews_info_get: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewInfoOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Sessions Info
   * @description Displays the full description of the session.
   * :param user:
   * :return:
   */
  get_sessions_info_api_v1_sessions_info_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Sessions Unrated
   * @description Gets all the session which haven't been rated yet.
   */
  get_sessions_unrated_api_v1_sessions_unrated_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionOut"][];
        };
      };
    };
  };
  /** Get Sessions Coaches */
  get_sessions_coaches_api_v1_sessions_coaches_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchOut"][];
        };
      };
    };
  };
  /**
   * Get Sessions
   * @description Returns the complete information stored for all sessions.
   */
  get_sessions_api_v1_sessions_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        state?: components["schemas"]["SessionFilterState"] | null;
        fromDate?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Session
   * @description Gets a description for a single session.
   */
  get_session_api_v1_session__session_id__get: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionDetailsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Sessions
   * @description Update the session using the new details being input by the user.
   */
  update_sessions_api_v1_session__session_id__put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionDetailsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Sessions Clients */
  get_sessions_clients_api_v1_sessions_clients_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchClientOut"][];
        };
      };
    };
  };
  /**
   * Session Approve
   * @description Coach can approve the session to indicate that session is valid and is ready for booking.
   */
  session_approve_api_v1_session__session_id__approve_put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Session Cancel
   * @description Cancels the appointment for a given session.
   */
  session_cancel_api_v1_session__session_id__cancel_put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionDropIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Session Report
   * @description Displays a message about the status of the session.
   */
  session_report_api_v1_session__session_id__report_put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionDropIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReportNotificationOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Session Refund */
  session_refund_api_v1_session__session_id__refund_put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionDropIn"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReportNotificationOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Session Decline */
  session_decline_api_v1_session__session_id__decline_put: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionDropIn"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Session Reviews
   * @description Displays all the reviews given for the current session along with the message, created at and rating value.
   */
  session_reviews_api_v1_session__session_id__reviews_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Session Review
   * @description Creates a single review for the given session.
   */
  create_session_review_api_v1_session__session_id__review_post: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionReviewIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Review
   * @description Creates a single review for the given session.
   */
  get_review_api_v1_session_review__review_id__get: {
    parameters: {
      path: {
        review_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Thread Review
   * @description Creates a single review for the given session.
   */
  create_thread_review_api_v1_session_review__review_id__post: {
    parameters: {
      path: {
        review_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionMessageIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Review Or Thread
   * @description Deletes the user session review upon confirmation.
   */
  delete_review_or_thread_api_v1_session_review__review_id__delete: {
    parameters: {
      path: {
        review_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Session Ics
   * @description Gets the session event in a calendar form of view.
   */
  get_session_ics_api_v1_session__session_id__ics_get: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Cancel Session Group */
  cancel_session_group_api_v1_session_group__group_id__cancel_put: {
    parameters: {
      path: {
        group_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionDropIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Favorites
   * @description Get list of favorites user connect with You account
   * Return SearchOut result for favorite coaches
   */
  get_favorites_api_v1_user_favorites_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchOut"][];
        };
      };
    };
  };
  /**
   * Add Favorite
   * @description Add new favorite user. If user already added response also success
   */
  add_favorite_api_v1_user_favorite_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FavoriteUserIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Favorite
   * @description Add remove favorite user by id. If user already add return also success
   */
  delete_favorite_api_v1_user_favorite__user_id__delete: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Blocked Users */
  get_blocked_users_api_v1_user_blacklist_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BlackListUserListOut"][];
        };
      };
    };
  };
  /**
   * Add User To Blacklist
   * @description Add new favorite user. If user already added response also success
   */
  add_user_to_blacklist_api_v1_user_blacklist_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlackListUserIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User From Blacklist
   * @description Add remove favorite user by id. If user already add return also success
   */
  delete_user_from_blacklist_api_v1_user_blacklist__user_id__delete: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Last Reviews
   * @description The reviews made by the clients are stored and displayed for other users to see their reviews.
   * The coach id is passed to refer to the corresponding coach along with the creation date of the comment/review.
   */
  get_user_last_reviews_api_v1_user__user_id__reviews_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User All Reviews Info */
  get_user_all_reviews_info_api_v1_user__user_id__reviews_info_get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionReviewInfoOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Config
   * @description Get config for support
   */
  get_user_config_api_v1_user_config_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserConfigOut"];
        };
      };
    };
  };
  /** List User Notes */
  list_user_notes_api_v1_user__id__notes_get: {
    parameters: {
      query?: {
        search?: string | null;
        page?: number | null;
        limit?: number | null;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserNotesOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Notes */
  get_user_notes_api_v1_user__id__note__notes_id__get: {
    parameters: {
      path: {
        notes_id: string;
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserNotesOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update User Notes */
  update_user_notes_api_v1_user__id__note__notes_id__put: {
    parameters: {
      path: {
        notes_id: string;
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotesUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserNotesOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User Notes */
  delete_user_notes_api_v1_user__id__note__notes_id__delete: {
    parameters: {
      path: {
        notes_id: string;
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create User Notes */
  create_user_notes_api_v1_user__id__note_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotesCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserNotesOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Business Profile */
  get_business_profile_api_v1_business_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BusinessProfileOut"];
        };
      };
    };
  };
  /** Update Business Profile */
  update_business_profile_api_v1_business_profile_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessUpdateProfileIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BusinessProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Business Profile Public */
  get_business_profile_public_api_v1_business__business_id__profile_get: {
    parameters: {
      path: {
        business_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicBusinessProfile"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Claim This Business */
  claim_this_business_api_v1_business__business_id__claim_post: {
    parameters: {
      path: {
        business_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessClaimIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Business Questions */
  get_business_questions_api_v1_business__business_id__questions_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
      path: {
        business_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Business Question */
  create_business_question_api_v1_business__business_id__question_post: {
    parameters: {
      path: {
        business_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Business Question */
  get_business_question_api_v1_business_question__question_id__get: {
    parameters: {
      path: {
        question_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Question Thread */
  update_question_thread_api_v1_business_question__question_id__put: {
    parameters: {
      path: {
        question_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Question Thread */
  create_question_thread_api_v1_business_question__question_id__post: {
    parameters: {
      path: {
        question_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionThreadCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Question */
  delete_question_api_v1_business_question__question_id__delete: {
    parameters: {
      path: {
        question_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Client Public */
  get_client_public_api_v1_client__client_id__public_get: {
    parameters: {
      path: {
        client_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicClientProfileOut"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Awards */
  get_all_awards_api_v1_coach_awards_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AwardOut"][];
        };
      };
    };
  };
  /** Create Award */
  create_award_api_v1_coach_award_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AwardCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AwardOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Award */
  update_award_api_v1_coach_award__award_id__put: {
    parameters: {
      path: {
        award_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AwardUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AwardOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Award */
  delete_award_api_v1_coach_award__award_id__delete: {
    parameters: {
      path: {
        award_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Certificates */
  get_all_certificates_api_v1_coach_certificates_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoachCertificateOut"][];
        };
      };
    };
  };
  /** Create Certificate */
  create_certificate_api_v1_coach_certificate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoachCertificateCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoachCertificateOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Certificate */
  update_certificate_api_v1_coach_certificate__certificate_id__put: {
    parameters: {
      path: {
        certificate_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoachCertificateUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoachCertificateOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Certificate */
  delete_certificate_api_v1_coach_certificate__certificate_id__delete: {
    parameters: {
      path: {
        certificate_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Faqs */
  get_all_faqs_api_v1_coach_faqs_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FAQDetailOut"][];
        };
      };
    };
  };
  /** Create Faq */
  create_faq_api_v1_coach_faq_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FAQCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FAQDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Faq */
  update_faq_api_v1_coach_faq__faq_id__put: {
    parameters: {
      path: {
        faq_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FAQUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FAQDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Faq */
  delete_faq_api_v1_coach_faq__faq_id__delete: {
    parameters: {
      path: {
        faq_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Equipments */
  get_all_equipments_api_v1_coach_equipments_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        search?: string | null;
        category?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Equipment */
  create_equipment_api_v1_coach_equipment_post: {
    parameters: {
      query?: {
        public?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentCreateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Equipment */
  update_equipment_api_v1_coach_equipment__equipment_id__put: {
    parameters: {
      path: {
        equipment_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Equipment */
  delete_equipment_api_v1_coach_equipment__equipment_id__delete: {
    parameters: {
      path: {
        equipment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Gallery */
  get_gallery_api_v1_coach_gallery_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryFileOut"][];
        };
      };
    };
  };
  /** Update Gallery */
  update_gallery_api_v1_coach_gallery_put: {
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryFileOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Services By Client
   * @description Get a list consisting of all the services being offered and the specified coach that is offering it.
   * This requires a coach id to be passed as a parameter for reference.
   */
  get_coach_services_by_client_api_v1_coach__coach_id__services_get: {
    parameters: {
      path: {
        coach_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Services
   * @description Gets a list of all the service sessions and all the coaches currently offering it.
   */
  get_coach_services_api_v1_coach_services_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Service Properties Fields */
  get_service_properties_fields_api_v1_coach_service_properties_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPropertyFieldOut"][];
        };
      };
    };
  };
  /**
   * Set Coach Services Order
   * @description Updates the coach service by organising in order chosen by the user for better organising and management.
   */
  set_coach_services_order_api_v1_coach_services_order_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceOrderIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceOrderIn"];
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Coach Service
   * @description Creates a service dedicated to a coach.
   */
  create_coach_service_api_v1_coach_service_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Service
   * @description Gets the services offered by the specified coach by passing the service id as a parameter.
   */
  get_coach_service_api_v1_coach_service__service_id__get: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDetailOut"];
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Coach Service
   * @description Updates the coaches information about their offered services and displays the complete change of their details.
   */
  update_coach_service_api_v1_coach_service__service_id__put: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDetailOut"];
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Coach Service
   * @description Deletes one of the services being offered by the specified coach by using coach id as reference.
   */
  delete_coach_service_api_v1_coach_service__service_id__delete: {
    parameters: {
      path: {
        service_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Coach Preview */
  get_coach_preview_api_v1_coach_preview_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchOut"];
        };
      };
    };
  };
  /**
   * Get Coach Profile
   * @description Checks the coach's profile using a unique coach id to call out the function and
   * returns all information regarding their profile.
   */
  get_coach_profile_api_v1_coach__coach_id__profile_get: {
    parameters: {
      path: {
        coach_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicCoachProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Availability Calendar
   * @description Get coach's availability from date and choose from list of slots.
   *
   * Returns the available slot from the start date till the end date.
   */
  get_coach_availability_calendar_api_v1_coach_availability_calendar_get: {
    parameters: {
      query?: {
        from_date?: string;
        to_date?: string;
        sessions?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CalendarOut"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Availabilities
   * @description Get coach's availability from date and choose from list of slots.
   *
   * Returns the available slot from the start date till the end date.
   */
  get_coach_availabilities_api_v1_coach_availabilities_get: {
    parameters: {
      query?: {
        from_date?: string | null;
        to_date?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AvailabilityOut"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Time Slot Availabilities
   * @description Creates a time slot availability to record available times for the coaches and
   * to ensure there is no coinciding session stacking.
   */
  create_time_slot_availabilities_api_v1_coach_availabilities_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailabilityIn"][];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AvailabilityOut"][] | null;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Time Slot Availability
   * @description Creates a time slot availability to record available times for the coaches and
   * to ensure there is no coinciding session stacking.
   */
  create_time_slot_availability_api_v1_coach_availability_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailabilityIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AvailabilityOut"] | null;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Time Slot Availabilities */
  delete_time_slot_availabilities_api_v1_coach_availabilities_delete_post: {
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Time Slot Availability
   * @description Get the availability time for coaches if there is a current time schedule or returns null if unavailable.
   */
  get_time_slot_availability_api_v1_coach_availability__availability_id__get: {
    parameters: {
      path: {
        availability_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AvailabilityOut"];
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Time Slot Availability
   * @description Update the current time availability for the specified coach using the availability id and returns
   * the information updated.
   */
  update_time_slot_availability_api_v1_coach_availability__availability_id__put: {
    parameters: {
      path: {
        availability_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailabilityUpdateIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AvailabilityOut"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove Slot Availability
   * @description Remove the time schedule for the allotted time for the coach and returns the status of procedure.
   */
  remove_slot_availability_api_v1_coach_availability__availability_id__delete: {
    parameters: {
      path: {
        availability_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Post Coach Availability By Date
   * @description Get coach's availability from date and choose from list of slots.
   *
   * Returns the available slot from the start date till the end date.
   */
  post_coach_availability_by_date_api_v1_coach_availabilities_available__date__delete: {
    parameters: {
      path: {
        date: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Post Coach Unavailability Remove All
   * @description Get coach's availability from date and choose from list of slots.
   *
   * Returns the available slot from the start date till the end date.
   */
  post_coach_unavailability_remove_all_api_v1_coach_availabilities_unavailable__date__delete: {
    parameters: {
      path: {
        date: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coach Availability Weekly
   * @description Get coach's availability from date and choose from list of slots.
   *
   * Returns the available slot from the start date till the end date.
   */
  get_coach_availability_weekly_api_v1_coach_availabilities_weekly_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WeeklyOut"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Coach Available */
  coach_available_api_v1_coach_available_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailableIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Revenue Analytics */
  revenue_analytics_api_v1_coach_analytics_revenue_get: {
    parameters: {
      query?: {
        fromDate?: string | null;
        toDate?: string | null;
        allTime?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TotalRevenueAnalyticsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Revenue Chart Analytics */
  revenue_chart_analytics_api_v1_coach_analytics_revenue_chart_get: {
    parameters: {
      query?: {
        fromDate?: string | null;
        toDate?: string | null;
        allTime?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminRevenueChartOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Session Info Analytics */
  session_info_analytics_api_v1_coach_analytics_session_info_get: {
    parameters: {
      query?: {
        fromDate?: string | null;
        toDate?: string | null;
        allTime?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionInfoAnalyticsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Total Client Analytics */
  total_client_analytics_api_v1_coach_analytics_clients_get: {
    parameters: {
      query?: {
        fromDate?: string | null;
        toDate?: string | null;
        allTime?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BookedUsersAnalyticsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Coach Analytics Summary */
  coach_analytics_summary_api_v1_coach_analytics_summary_get: {
    parameters: {
      query?: {
        fromDate?: string | null;
        toDate?: string | null;
        allTime?: boolean | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoachAnalyticsSummary"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Boost Profile */
  boost_profile_api_v1_coach_boost_profile_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BoostedProfileIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
