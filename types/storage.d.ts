/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/storage/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Attachment */
        get: operations["list_attachment_api_v1_storage_attachments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/attachment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Upload Attachment */
        post: operations["post_upload_attachment_api_v1_storage_attachment_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/attachment/{attachment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Attachment */
        delete: operations["delete_attachment_api_v1_storage_attachment__attachment_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/profile/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload User Avatar
         * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
         */
        post: operations["upload_user_avatar_api_v1_storage_profile_avatar_post"];
        /**
         * Delete User Avatar
         * @description Delete avatar image
         *     to complete this process.
         */
        delete: operations["delete_user_avatar_api_v1_storage_profile_avatar_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/profile/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload User Media
         * @description Uploads the media as requested by the user and display it on their profile page.
         *     Media could either be a video or a picture format.
         */
        post: operations["upload_user_media_api_v1_storage_profile_media_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Image
         * @description Uploading a file to the user's gallery
         *     The maximum file size is 20 MB and acceptable file types are:
         *
         *     - png
         *     - jpg
         */
        post: operations["upload_image_api_v1_storage_image_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Images
         * @description List of uploaded images from the user's gallery
         */
        get: operations["list_images_api_v1_storage_images_get"];
        put?: never;
        /**
         * Upload Images
         * @description Uploading a files to the user's gallery. This working like upload file but  on many images.
         *     The maximum file size is 20 MB and acceptable file types are:
         *
         *     - png
         *     - jpg
         */
        post: operations["upload_images_api_v1_storage_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/images/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Images Order
         * @description Changes the order of files in the user's gallery.
         *
         *     The list must contain the ID of all available files,
         *     obtained using the [GET] List Images request.
         */
        put: operations["set_images_order_api_v1_storage_images_order_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/image/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Image */
        put: operations["update_image_api_v1_storage_image__image_id__put"];
        post?: never;
        /** Delete Image */
        delete: operations["delete_image_api_v1_storage_image__image_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Video
         * @description Uploads a video file and displays the preview as a separate media.
         */
        post: operations["upload_video_api_v1_storage_video_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Video
         * @description Lists out all the video preview made by the user.
         */
        get: operations["list_video_api_v1_storage_videos_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/videos/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Videos Order */
        put: operations["set_videos_order_api_v1_storage_videos_order_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/video/{video_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Video
         * @description Replace the current video file with the new file that the user upload.
         */
        put: operations["update_video_api_v1_storage_video__video_id__put"];
        post?: never;
        /**
         * Delete Video
         * @description Removes the current video file specified and returns the status of removal.
         */
        delete: operations["delete_video_api_v1_storage_video__video_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Certificate
         * @deprecated
         * @description Upload the image only related to coach's certificate as a proof of fitness experience.
         */
        post: operations["upload_certificate_api_v1_storage_certificate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Certificates
         * @deprecated
         * @description List all the certificates uploaded by the coach
         */
        get: operations["list_certificates_api_v1_storage_certificates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/certificate/{certificate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Certificate
         * @deprecated
         * @description Update the certificate by adding the newly inserted image and replacing the previous image file simultaneously.
         */
        put: operations["update_certificate_api_v1_storage_certificate__certificate_id__put"];
        post?: never;
        /**
         * Delete Certificate
         * @deprecated
         * @description Delete the certificate using the certificate id and coach's authentication is required in order
         *     to complete this process.
         */
        delete: operations["delete_certificate_api_v1_storage_certificate__certificate_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/certificates/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Certificates Order
         * @deprecated
         * @description Changes the order of files in the user's certificates.
         *
         *     The list must contain the ID of all available files,
         *     obtained using the [GET] List Images request.
         */
        put: operations["set_certificates_order_api_v1_storage_certificates_order_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/report/{report_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Report Attachment
         * @deprecated
         */
        get: operations["get_report_attachment_api_v1_storage_report__report_id__get"];
        put?: never;
        /**
         * Upload Report
         * @deprecated
         */
        post: operations["upload_report_api_v1_storage_report__report_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/report/{report_id}/file/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Report Attachment File
         * @deprecated
         */
        delete: operations["delete_report_attachment_file_api_v1_storage_report__report_id__file__file_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/category/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Category Cover
         * @deprecated
         * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
         */
        post: operations["upload_category_cover_api_v1_storage_category__category_id__post"];
        /**
         * Delete Category Cover
         * @deprecated
         * @description Delete avatar image
         *     to complete this process.
         */
        delete: operations["delete_category_cover_api_v1_storage_category__category_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/equipments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Equipments
         * @deprecated
         */
        get: operations["get_all_equipments_api_v1_storage_equipments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/equipment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Equipment
         * @deprecated
         */
        post: operations["create_equipment_api_v1_storage_equipment_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/equipment/{equipment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Equipment
         * @deprecated
         */
        put: operations["update_equipment_api_v1_storage_equipment__equipment_id__put"];
        post?: never;
        /**
         * Delete Equipment
         * @deprecated
         */
        delete: operations["delete_equipment_api_v1_storage_equipment__equipment_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/equipment/{equipment_id}/file/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Equipment File
         * @deprecated
         */
        delete: operations["delete_equipment_file_api_v1_storage_equipment__equipment_id__file__file_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** FileBase */
        AttachmentFileOut: {
            /**
             * Title
             * @description The title name of the uploaded file
             */
            title?: string | null;
            /**
             * Description
             * @description The description for uploaded file
             */
            description?: string | null;
            /**
             * Contenttype
             * @description File contents in MIME format
             */
            contentType?: string | null;
            /**
             * Id
             * @description UUID of file
             */
            id?: string | null;
            /**
             * Originfilename
             * @description The original file name given when uploading the file
             */
            originFilename?: string | null;
            /**
             * Url
             * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
             */
            url?: string | null;
            /**
             * Thumb
             * @description Link to the preview file
             */
            thumb?: string | null;
            /** Filesize */
            filesize?: number | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
            /**
             * Duration
             * @description Duration in seconds
             */
            duration?: number | null;
            /**
             * Videothumb
             * @description Link to the preview file
             */
            videoThumb?: string | null;
        };
        /** BalanceOut */
        BalanceOut: {
            /** Amount */
            amount?: number | null;
            /** Currency */
            currency?: string | null;
        };
        /** Body_create_equipment_api_v1_storage_equipment_post */
        Body_create_equipment_api_v1_storage_equipment_post: {
            /**
             * Files
             * @default []
             */
            files: (string)[];
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
        };
        /** Body_post_upload_attachment_api_v1_storage_attachment_post */
        Body_post_upload_attachment_api_v1_storage_attachment_post: {
            /**
             * File
             * Format: binary
             */
            file: File;
            /** Title */
            title?: string | null;
            type?: components["schemas"]["FileType"] | null;
            /** Description */
            description?: string | null;
            /**
             * Cover
             * Format: binary
             * @description Cover image as thumbnails, if none generate from file
             */
            cover?: string;
        };
        /** Body_update_certificate_api_v1_storage_certificate__certificate_id__put */
        Body_update_certificate_api_v1_storage_certificate__certificate_id__put: {
            /** File */
            file?: File | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Issue Date */
            issue_date?: string | null;
        };
        /** Body_update_equipment_api_v1_storage_equipment__equipment_id__put */
        Body_update_equipment_api_v1_storage_equipment__equipment_id__put: {
            /**
             * Files
             * @default []
             */
            files: (string)[];
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
        };
        /** Body_update_image_api_v1_storage_image__image_id__put */
        Body_update_image_api_v1_storage_image__image_id__put: {
            /** File */
            file?: File | null;
            /** Title */
            title?: string | null;
        };
        /** Body_update_video_api_v1_storage_video__video_id__put */
        Body_update_video_api_v1_storage_video__video_id__put: {
            /**
             * File
             * Format: binary
             */
            file?: File;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Preview
             * Format: binary
             */
            preview?: string;
        };
        /** Body_upload_category_cover_api_v1_storage_category__category_id__post */
        Body_upload_category_cover_api_v1_storage_category__category_id__post: {
            /**
             * File
             * Format: binary
             */
            file: File;
        };
        /** Body_upload_certificate_api_v1_storage_certificate_post */
        Body_upload_certificate_api_v1_storage_certificate_post: {
            /**
             * File
             * Format: binary
             */
            file: File;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Issue Date */
            issue_date?: string | null;
        };
        /** Body_upload_image_api_v1_storage_image_post */
        Body_upload_image_api_v1_storage_image_post: {
            /**
             * File
             * Format: binary
             * @description Downloadable file
             */
            file: File;
            /**
             * Title
             * @description The title name of the uploaded file
             */
            title?: string | null;
        };
        /** Body_upload_images_api_v1_storage_images_post */
        Body_upload_images_api_v1_storage_images_post: {
            /**
             * Files
             * @description List of upload files
             */
            files: File[];
        };
        /** Body_upload_report_api_v1_storage_report__report_id__post */
        Body_upload_report_api_v1_storage_report__report_id__post: {
            /** Files */
            files: File[];
        };
        /** Body_upload_user_avatar_api_v1_storage_profile_avatar_post */
        Body_upload_user_avatar_api_v1_storage_profile_avatar_post: {
            /**
             * File
             * Format: binary
             */
            file: File;
        };
        /** Body_upload_user_media_api_v1_storage_profile_media_post */
        Body_upload_user_media_api_v1_storage_profile_media_post: {
            /**
             * File
             * Format: binary
             */
            file: File;
            /**
             * Preview
             * Format: binary
             */
            preview?: string;
        };
        /** Body_upload_video_api_v1_storage_video_post */
        Body_upload_video_api_v1_storage_video_post: {
            /**
             * File
             * Format: binary
             */
            file: File;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Preview
             * Format: binary
             */
            preview?: string;
        };
        /** CategoryOut */
        CategoryOut: {
            /** Name */
            name?: string;
            /** Description */
            description?: string | null;
            /** Slug */
            slug?: string | null;
            /** @default business */
            type: components["schemas"]["CategoryType"] | null;
            /** Parentid */
            parentId?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Imageurl */
            imageUrl?: string | null;
            /** Count */
            count?: number | null;
            /**
             * Subcategories
             * @default []
             */
            subcategories: components["schemas"]["CategoryOut"][];
            /**
             * Attachments
             * @default []
             */
            attachments: components["schemas"]["MediaFileOut"][] | null;
        };
        /**
         * CategoryType
         * @enum {string}
         */
        CategoryType: "stretch" | "coach" | "business" | "nutrition" | "calculator";
        /** FileBase */
        CertificateFileOut: {
            /**
             * Title
             * @description The title name of the uploaded file
             */
            title?: string | null;
            /**
             * Description
             * @description The description for uploaded file
             */
            description?: string | null;
            /**
             * Contenttype
             * @description File contents in MIME format
             */
            contentType?: string | null;
            /**
             * Id
             * @description UUID of file
             */
            id?: string | null;
            /**
             * Originfilename
             * @description The original file name given when uploading the file
             */
            originFilename?: string | null;
            /**
             * Url
             * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
             */
            url?: string | null;
            /**
             * Thumb
             * @description Link to the preview file
             */
            thumb?: string | null;
            /** Filesize */
            filesize?: number | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
            /** Issuedate */
            issueDate?: string | null;
            /** Expiredate */
            expireDate?: string | null;
        };
        /** DeleteResponse */
        DeleteResponse: {
            /**
             * Status
             * @description Stretch status response
             * @default success
             */
            status: string;
            /**
             * Deleted
             * @default 0
             */
            deleted: number;
        };
        /** EquipmentFileOut */
        EquipmentFileOut: {
            /**
             * Contenttype
             * @description Content type of media file
             */
            contentType?: string | null;
            /**
             * Url
             * @description Full size url
             */
            url?: string | null;
            /**
             * Thumb
             * @description Thumbnail url
             */
            thumb?: string | null;
            /**
             * Videothumb
             * @description Video thumbnail url
             */
            videoThumb?: string | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
            /**
             * Duration
             * @description Duration of media
             */
            duration?: number | null;
            /**
             * Originfilename
             * @description Original media filename
             */
            originFilename?: string | null;
            /**
             * Filesize
             * @description Filesize of media
             */
            filesize?: number | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** EquipmentOut */
        EquipmentOut: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /**
             * Public
             * @default true
             */
            public: boolean;
            /**
             * Attachments
             * @default []
             */
            attachments: components["schemas"]["EquipmentFileOut"][] | null;
        };
        /**
         * FileBase
         * @description For each file generated preview
         */
        FileOut: {
            /**
             * Title
             * @description The title name of the uploaded file
             */
            title?: string | null;
            /**
             * Description
             * @description The description for uploaded file
             */
            description?: string | null;
            /**
             * Contenttype
             * @description File contents in MIME format
             */
            contentType?: string | null;
            /**
             * Id
             * @description UUID of file
             */
            id?: string | null;
            /**
             * Originfilename
             * @description The original file name given when uploading the file
             */
            originFilename?: string | null;
            /**
             * Url
             * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
             */
            url?: string | null;
            /**
             * Thumb
             * @description Link to the preview file
             */
            thumb?: string | null;
            /** Filesize */
            filesize?: number | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
        };
        /**
         * FileType
         * @enum {string}
         */
        FileType: "media" | "gallery" | "static" | "certificate" | "equipment" | "award" | "category";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MediaFileOut */
        MediaFileOut: {
            /**
             * Contenttype
             * @description Content type of media file
             */
            contentType?: string | null;
            /**
             * Url
             * @description Full size url
             */
            url?: string | null;
            /**
             * Thumb
             * @description Thumbnail url
             */
            thumb?: string | null;
            /**
             * Videothumb
             * @description Video thumbnail url
             */
            videoThumb?: string | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
            /**
             * Duration
             * @description Duration of media
             */
            duration?: number | null;
            /**
             * Originfilename
             * @description Original media filename
             */
            originFilename?: string | null;
            /**
             * Filesize
             * @description Filesize of media
             */
            filesize?: number | null;
        };
        /**
         * OrderIn
         * @description Order by IDs
         */
        OrderIn: {
            /**
             * Order
             * @description List of IDs in the required order
             * @default []
             */
            order: string[];
        };
        /** ProfileFilling */
        ProfileFilling: {
            /** Allownonverify */
            allowNonVerify?: boolean | null;
            /** Availability */
            availability?: boolean | null;
            /** Avatar */
            avatar?: boolean | null;
            /** Certificates */
            certificates?: boolean | null;
            /** Description */
            description?: boolean | null;
            /** Experience */
            experience?: boolean | null;
            /** Images */
            images?: boolean | null;
            /** Languages */
            languages?: boolean | null;
            /** Locations */
            locations?: boolean | null;
            /** Media */
            media?: boolean | null;
            /** Services */
            services?: boolean | null;
            /** Faqs */
            faqs?: boolean | null;
            /**
             * Percentage
             * @default 0
             */
            percentage: number | null;
        };
        /** ReportAttachment */
        ReportAttachmentOut: {
            /** Id */
            id: string | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Source
             * @default local
             */
            source: string;
            /** Filename */
            filename: string;
            /** Origin Filename */
            originFilename: string | null;
            /** Filesize */
            filesize: number | null;
            /**
             * Content Type
             * @default application/pdf
             */
            contentType: string | null;
            /**
             * Status
             * @description uploaded: uploaded<br/>processing: processing<br/>approved: approved<br/>rejected: rejected<br/>review: review<br/>draft: draft<br/>deleted: deleted
             * @default review
             */
            status: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"];
            /** Url */
            url?: string | null;
        };
        /** StretchResponse */
        StretchResponse: {
            /**
             * Status
             * @description Stretch status response
             * @default success
             */
            status: string;
        };
        /**
         * StripeConnectStatus
         * @enum {string}
         */
        StripeConnectStatus: "unregistered" | "completed" | "pending" | "unverified";
        /**
         * UserAllergy
         * @enum {string}
         */
        UserAllergy: "none" | "cat" | "dog" | "all";
        /**
         * UserGender
         * @enum {string}
         */
        UserGender: "male" | "female" | "transman" | "transwoman";
        /** UserProfileOut */
        UserProfileOut: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Displayname
             * @description User display name
             * @example Smith
             */
            displayName?: string | null;
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /** Avatarurl */
            avatarUrl?: string | null;
            type: components["schemas"]["UserType"];
            /** Rating */
            rating?: number | null;
            /**
             * Reviewscount
             * @description Number of reviews
             * @default 0
             */
            reviewsCount: number | null;
            /** Sessionscount */
            sessionsCount?: number | null;
            /**
             * Registrationdate
             * @description User registration date
             */
            registrationDate?: string | null;
            /** Verified */
            verified?: boolean | null;
            /**
             * Experience
             * @description User experience
             */
            experience?: number | null;
            allergy?: components["schemas"]["UserAllergy"] | null;
            /** Allownonverify */
            allowNonVerify?: boolean | null;
            /**
             * @description User gender
             * @example male
             */
            gender?: components["schemas"]["UserGender"] | null;
            /**
             * Avatartype
             * @description Avatar type of banner picture
             */
            avatarType?: string | null;
            /** Avatarimageurl */
            avatarImageUrl?: string | null;
            /** Mediatype */
            mediaType?: string | null;
            /** Mediaurl */
            mediaUrl?: string | null;
            /** Mediapreviewurl */
            mediaPreviewUrl?: string | null;
            /**
             * Description
             * @description About
             */
            description?: string | null;
            /**
             * Languages
             * @description Languages
             */
            languages: string | {
                [key: string]: string | undefined;
            } | null;
            /**
             * Properties
             * @description Extra property for user
             */
            properties?: components["schemas"]["UserPropOut"][] | null;
            /**
             * Phone
             * @description Phone number in international format
             * @example +97100000000
             */
            phone?: string | null;
            /**
             * Whatsapp
             * @description Whatsapp  number in international format
             * @example +97100000000
             */
            whatsapp?: string | null;
            /** @description KYC verification */
            kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
            /** Chaturl */
            chatUrl?: string | null;
            /**
             * Blocked
             * @default false
             */
            blocked: boolean;
            /**
             * Username
             * @description Username input
             */
            username?: string | null;
            /**
             * Email
             * @description Email format
             * @example info@stretch.com
             */
            email?: string | null;
            /**
             * Timezone
             * @description Default timezone for user
             * @example Asia/Dubai
             */
            timezone?: string | null;
            /**
             * Birthdate
             * @description User Birth date
             * @example 2000-07-08
             */
            birthDate?: string | null;
            /** @description User balance */
            balance?: components["schemas"]["BalanceOut"] | null;
            /**
             * Verifiedphone
             * @description Phone verification
             */
            verifiedPhone?: boolean | null;
            /**
             * Verifiedemail
             * @description Email verification
             */
            verifiedEmail?: boolean | null;
            /**
             * Available
             * @description Availability
             */
            available?: boolean | null;
            /** Verifycode */
            verifyCode?: string | null;
            /**
             * Totalpayment
             * @description Total payment amount
             */
            totalPayment?: number | null;
            /**
             * Totalpaymentcurrency
             * @description Payment currency
             */
            totalPaymentCurrency?: string | null;
            /**
             * Publicviewallowed
             * @description client only, allow clients to view profile?
             * @example false
             */
            publicViewAllowed?: boolean | null;
            /** @description Profile picture completion status */
            profileCompletion?: components["schemas"]["ProfileFilling"] | null;
            /**
             * Sbaccesstoken
             * @description Access token for sendbird registration
             */
            sbAccessToken?: string | null;
        };
        /** UserPropOut */
        UserPropOut: {
            /** Name */
            name: string;
            /** Value */
            value?: string | number | boolean | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Type */
            type: string | null;
            /** Options */
            options?: {
                [key: string]: string | undefined;
            } | null;
        };
        /**
         * UserType
         * @enum {string}
         */
        UserType: "guest" | "coach" | "client" | "studio" | "business" | "support" | "admin";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** FileBase */
        VideoFileOut: {
            /**
             * Title
             * @description The title name of the uploaded file
             */
            title?: string | null;
            /**
             * Description
             * @description The description for uploaded file
             */
            description?: string | null;
            /**
             * Contenttype
             * @description File contents in MIME format
             */
            contentType?: string | null;
            /**
             * Id
             * @description UUID of file
             */
            id?: string | null;
            /**
             * Originfilename
             * @description The original file name given when uploading the file
             */
            originFilename?: string | null;
            /**
             * Url
             * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
             */
            url?: string | null;
            /**
             * Thumb
             * @description Link to the preview file
             */
            thumb?: string | null;
            /** Filesize */
            filesize?: number | null;
            /** @description File visibility status in the system: on review, approved or rejected */
            status?: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"] | null;
            /**
             * Duration
             * @description Duration in seconds
             */
            duration?: number | null;
        };
        /**
         * FileStatus
         * @enum {string}
         */
        stretchcore__models__storage__file__FileStatus__1: "uploaded" | "processing" | "approved" | "rejected" | "review" | "draft" | "deleted";
        stretchcore__models__storage__file__FileStatus__2: components["schemas"]["stretchcore__models__storage__file__FileStatus__1"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_attachment_api_v1_storage_attachments_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentFileOut"][];
                };
            };
        };
    };
    post_upload_attachment_api_v1_storage_attachment_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_post_upload_attachment_api_v1_storage_attachment_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentFileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_attachment_api_v1_storage_attachment__attachment_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_user_avatar_api_v1_storage_profile_avatar_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_user_avatar_api_v1_storage_profile_avatar_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_avatar_api_v1_storage_profile_avatar_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    upload_user_media_api_v1_storage_profile_media_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_user_media_api_v1_storage_profile_media_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_image_api_v1_storage_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_image_api_v1_storage_image_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_images_api_v1_storage_images_get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_images_api_v1_storage_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_upload_images_api_v1_storage_images_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_images_order_api_v1_storage_images_order_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderIn"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_image_api_v1_storage_image__image_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_update_image_api_v1_storage_image__image_id__put"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_image_api_v1_storage_image__image_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_video_api_v1_storage_video_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_video_api_v1_storage_video_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoFileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_video_api_v1_storage_videos_get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoFileOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_videos_order_api_v1_storage_videos_order_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderIn"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_video_api_v1_storage_video__video_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_update_video_api_v1_storage_video__video_id__put"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoFileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_video_api_v1_storage_video__video_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_certificate_api_v1_storage_certificate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_certificate_api_v1_storage_certificate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateFileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_certificates_api_v1_storage_certificates_get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateFileOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_certificate_api_v1_storage_certificate__certificate_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certificate_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_update_certificate_api_v1_storage_certificate__certificate_id__put"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_certificate_api_v1_storage_certificate__certificate_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certificate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_certificates_order_api_v1_storage_certificates_order_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderIn"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_report_attachment_api_v1_storage_report__report_id__get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
            };
            header?: never;
            path: {
                report_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportAttachmentOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_report_api_v1_storage_report__report_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                report_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_report_api_v1_storage_report__report_id__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportAttachmentOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_report_attachment_file_api_v1_storage_report__report_id__file__file_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                report_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_category_cover_api_v1_storage_category__category_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_category_cover_api_v1_storage_category__category_id__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_category_cover_api_v1_storage_category__category_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_equipments_api_v1_storage_equipments_get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
                search?: string | null;
                category?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EquipmentOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_equipment_api_v1_storage_equipment_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_equipment_api_v1_storage_equipment_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EquipmentOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_equipment_api_v1_storage_equipment__equipment_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                equipment_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_update_equipment_api_v1_storage_equipment__equipment_id__put"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_equipment_api_v1_storage_equipment__equipment_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                equipment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_equipment_file_api_v1_storage_equipment__equipment_id__file__file_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                equipment_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StretchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
