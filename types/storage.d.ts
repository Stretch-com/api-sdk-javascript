/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/storage/attachments": {
    /** List Attachment */
    get: operations["list_attachment_api_v1_storage_attachments_get"];
  };
  "/api/v1/storage/attachment": {
    /** Post Upload Attachment */
    post: operations["post_upload_attachment_api_v1_storage_attachment_post"];
  };
  "/api/v1/storage/attachment/{attachment_id}": {
    /** Delete Attachment */
    delete: operations["delete_attachment_api_v1_storage_attachment__attachment_id__delete"];
  };
  "/api/v1/storage/profile/avatar": {
    /**
     * Save User Avatar
     * @deprecated
     * @description Retrieves original avatar file and stores the original avatar url in user properties
     */
    get: operations["save_user_avatar_api_v1_storage_profile_avatar_get"];
    /**
     * Upload User Avatar
     * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
     */
    post: operations["upload_user_avatar_api_v1_storage_profile_avatar_post"];
    /**
     * Delete User Avatar
     * @description Delete avatar image
     * to complete this process.
     */
    delete: operations["delete_user_avatar_api_v1_storage_profile_avatar_delete"];
  };
  "/api/v1/storage/profile/media": {
    /**
     * Upload User Media
     * @description Uploads the media as requested by the user and display it on their profile page.
     * Media could either be a video or a picture format.
     */
    post: operations["upload_user_media_api_v1_storage_profile_media_post"];
  };
  "/api/v1/storage/image": {
    /**
     * Upload Image
     * @deprecated
     * @description Uploading a file to the user's gallery
     * The maximum file size is 20 MB and acceptable file types are:
     *
     * - png
     * - jpg
     */
    post: operations["upload_image_api_v1_storage_image_post"];
  };
  "/api/v1/storage/images": {
    /**
     * List Images
     * @deprecated
     * @description List of uploaded images from the user's gallery
     */
    get: operations["list_images_api_v1_storage_images_get"];
    /**
     * Upload Images
     * @deprecated
     * @description Uploading a files to the user's gallery. This working like upload file but  on many images.
     * The maximum file size is 20 MB and acceptable file types are:
     *
     * - png
     * - jpg
     */
    post: operations["upload_images_api_v1_storage_images_post"];
  };
  "/api/v1/storage/images/order": {
    /**
     * Set Images Order
     * @deprecated
     * @description Changes the order of files in the user's gallery.
     *
     * The list must contain the ID of all available files,
     * obtained using the [GET] List Images request.
     */
    put: operations["set_images_order_api_v1_storage_images_order_put"];
  };
  "/api/v1/storage/image/{image_id}": {
    /**
     * Update Image
     * @deprecated
     */
    put: operations["update_image_api_v1_storage_image__image_id__put"];
    /**
     * Delete Image
     * @deprecated
     */
    delete: operations["delete_image_api_v1_storage_image__image_id__delete"];
  };
  "/api/v1/storage/video": {
    /**
     * Upload Video
     * @deprecated
     * @description Uploads a video file and displays the preview as a separate media.
     */
    post: operations["upload_video_api_v1_storage_video_post"];
  };
  "/api/v1/storage/videos": {
    /**
     * List Video
     * @deprecated
     * @description Lists out all the video preview made by the user.
     */
    get: operations["list_video_api_v1_storage_videos_get"];
  };
  "/api/v1/storage/videos/order": {
    /**
     * Set Videos Order
     * @deprecated
     */
    put: operations["set_videos_order_api_v1_storage_videos_order_put"];
  };
  "/api/v1/storage/video/{video_id}": {
    /**
     * Update Video
     * @deprecated
     * @description Replace the current video file with the new file that the user upload.
     */
    put: operations["update_video_api_v1_storage_video__video_id__put"];
    /**
     * Delete Video
     * @deprecated
     * @description Removes the current video file specified and returns the status of removal.
     */
    delete: operations["delete_video_api_v1_storage_video__video_id__delete"];
  };
  "/api/v1/storage/certificate": {
    /**
     * Upload Certificate
     * @deprecated
     * @description Upload the image only related to coach's certificate as a proof of fitness experience.
     */
    post: operations["upload_certificate_api_v1_storage_certificate_post"];
  };
  "/api/v1/storage/certificates": {
    /**
     * List Certificates
     * @deprecated
     * @description List all the certificates uploaded by the coach
     */
    get: operations["list_certificates_api_v1_storage_certificates_get"];
  };
  "/api/v1/storage/certificate/{certificate_id}": {
    /**
     * Update Certificate
     * @deprecated
     * @description Update the certificate by adding the newly inserted image and replacing the previous image file simultaneously.
     */
    put: operations["update_certificate_api_v1_storage_certificate__certificate_id__put"];
    /**
     * Delete Certificate
     * @deprecated
     * @description Delete the certificate using the certificate id and coach's authentication is required in order
     * to complete this process.
     */
    delete: operations["delete_certificate_api_v1_storage_certificate__certificate_id__delete"];
  };
  "/api/v1/storage/certificates/order": {
    /**
     * Set Certificates Order
     * @deprecated
     * @description Changes the order of files in the user's certificates.
     *
     * The list must contain the ID of all available files,
     * obtained using the [GET] List Images request.
     */
    put: operations["set_certificates_order_api_v1_storage_certificates_order_put"];
  };
  "/api/v1/storage/report/{report_id}": {
    /**
     * Get Report Attachment
     * @deprecated
     */
    get: operations["get_report_attachment_api_v1_storage_report__report_id__get"];
    /**
     * Upload Report
     * @deprecated
     */
    post: operations["upload_report_api_v1_storage_report__report_id__post"];
  };
  "/api/v1/storage/report/{report_id}/file/{file_id}": {
    /**
     * Delete Report Attachment File
     * @deprecated
     */
    delete: operations["delete_report_attachment_file_api_v1_storage_report__report_id__file__file_id__delete"];
  };
  "/api/v1/storage/category/{category_id}": {
    /**
     * Upload Category Cover
     * @deprecated
     * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
     */
    post: operations["upload_category_cover_api_v1_storage_category__category_id__post"];
    /**
     * Delete Category Cover
     * @deprecated
     * @description Delete avatar image
     * to complete this process.
     */
    delete: operations["delete_category_cover_api_v1_storage_category__category_id__delete"];
  };
  "/api/v1/storage/equipments": {
    /**
     * Get All Equipments
     * @deprecated
     */
    get: operations["get_all_equipments_api_v1_storage_equipments_get"];
  };
  "/api/v1/storage/equipment": {
    /**
     * Create Equipment
     * @deprecated
     */
    post: operations["create_equipment_api_v1_storage_equipment_post"];
  };
  "/api/v1/storage/equipment/{equipment_id}": {
    /**
     * Update Equipment
     * @deprecated
     */
    put: operations["update_equipment_api_v1_storage_equipment__equipment_id__put"];
    /**
     * Delete Equipment
     * @deprecated
     */
    delete: operations["delete_equipment_api_v1_storage_equipment__equipment_id__delete"];
  };
  "/api/v1/storage/equipment/{equipment_id}/file/{file_id}": {
    /**
     * Delete Equipment File
     * @deprecated
     */
    delete: operations["delete_equipment_file_api_v1_storage_equipment__equipment_id__file__file_id__delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** FileBase */
    AttachmentFileOut: {
      /**
       * Id
       * @description UUID of file
       */
      id?: string | null;
      /**
       * Title
       * @description The title name of the uploaded file
       */
      title?: string | null;
      /**
       * Description
       * @description The description for uploaded file
       */
      description?: string | null;
      /**
       * Source
       * @default local
       */
      source?: string;
      /**
       * Originfilename
       * @description The original file name given when uploading the file
       */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /**
       * Contenttype
       * @description File contents in MIME format
       */
      contentType?: string | null;
      /**
       * Url
       * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
       */
      url?: string | null;
      /**
       * Thumb
       * @description Link to the preview file
       */
      thumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["FileStatus"] | null;
      /**
       * Duration
       * @description Duration in seconds
       */
      duration?: number | null;
      /**
       * Videothumb
       * @description Link to the preview file
       */
      videoThumb?: string | null;
    };
    /** BalanceOut */
    BalanceOut: {
      /** Amount */
      amount?: number | null;
      /** Currency */
      currency?: string | null;
    };
    /** Body_create_equipment_api_v1_storage_equipment_post */
    Body_create_equipment_api_v1_storage_equipment_post: {
      /**
       * Files
       * @default []
       */
      files?: File[];
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** Body_post_upload_attachment_api_v1_storage_attachment_post */
    Body_post_upload_attachment_api_v1_storage_attachment_post: {
      /**
       * File
       * Format: binary
       */
      file: File;
      /** Title */
      title?: string | null;
      type?: components["schemas"]["FileType"] | null;
      /** Description */
      description?: string | null;
      /**
       * Cover
       * @description Cover image as thumbnails, if none generate from file
       */
      cover?: string | null;
    };
    /** Body_update_certificate_api_v1_storage_certificate__certificate_id__put */
    Body_update_certificate_api_v1_storage_certificate__certificate_id__put: {
      /** File */
      file?: File | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Issue Date */
      issue_date?: string | null;
    };
    /** Body_update_equipment_api_v1_storage_equipment__equipment_id__put */
    Body_update_equipment_api_v1_storage_equipment__equipment_id__put: {
      /**
       * Files
       * @default []
       */
      files?: File[];
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** Body_update_image_api_v1_storage_image__image_id__put */
    Body_update_image_api_v1_storage_image__image_id__put: {
      /** File */
      file?: File | null;
      /** Title */
      title?: string | null;
    };
    /** Body_update_video_api_v1_storage_video__video_id__put */
    Body_update_video_api_v1_storage_video__video_id__put: {
      /**
       * File
       * Format: binary
       */
      file?: File;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Preview
       * Format: binary
       */
      preview?: string;
    };
    /** Body_upload_category_cover_api_v1_storage_category__category_id__post */
    Body_upload_category_cover_api_v1_storage_category__category_id__post: {
      /**
       * File
       * Format: binary
       */
      file: File;
    };
    /** Body_upload_certificate_api_v1_storage_certificate_post */
    Body_upload_certificate_api_v1_storage_certificate_post: {
      /**
       * File
       * Format: binary
       */
      file: File;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Issue Date */
      issue_date?: string | null;
    };
    /** Body_upload_image_api_v1_storage_image_post */
    Body_upload_image_api_v1_storage_image_post: {
      /**
       * File
       * Format: binary
       * @description Downloadable file
       */
      file: File;
      /**
       * Title
       * @description The title name of the uploaded file
       */
      title?: string | null;
    };
    /** Body_upload_images_api_v1_storage_images_post */
    Body_upload_images_api_v1_storage_images_post: {
      /**
       * Files
       * @description List of upload files
       */
      files: File[];
    };
    /** Body_upload_report_api_v1_storage_report__report_id__post */
    Body_upload_report_api_v1_storage_report__report_id__post: {
      /** Files */
      files: File[];
    };
    /** Body_upload_user_avatar_api_v1_storage_profile_avatar_post */
    Body_upload_user_avatar_api_v1_storage_profile_avatar_post: {
      /**
       * File
       * Format: binary
       */
      file: File;
    };
    /** Body_upload_user_media_api_v1_storage_profile_media_post */
    Body_upload_user_media_api_v1_storage_profile_media_post: {
      /**
       * File
       * Format: binary
       */
      file: File;
      /**
       * Preview
       * Format: binary
       */
      preview?: string;
    };
    /** Body_upload_video_api_v1_storage_video_post */
    Body_upload_video_api_v1_storage_video_post: {
      /**
       * File
       * Format: binary
       */
      file: File;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Preview
       * Format: binary
       */
      preview?: string;
    };
    /** CategoryOut */
    CategoryOut: {
      /** Name */
      name?: string;
      /** Description */
      description?: string | null;
      /** Slug */
      slug?: string | null;
      /** @default business */
      type?: components["schemas"]["CategoryType"] | null;
      /** Parentid */
      parentId?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Imageurl */
      imageUrl?: string | null;
      /** Count */
      count?: number | null;
      /**
       * Subcategories
       * @default []
       */
      subcategories?: components["schemas"]["CategoryOut"][];
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["AttachmentFileOut"][];
    };
    /**
     * CategoryType
     * @enum {string}
     */
    CategoryType: "stretch" | "coach" | "business" | "nutrition" | "calculator";
    /** FileBase */
    CertificateFileOut: {
      /**
       * Id
       * @description UUID of file
       */
      id?: string | null;
      /**
       * Title
       * @description The title name of the uploaded file
       */
      title?: string | null;
      /**
       * Description
       * @description The description for uploaded file
       */
      description?: string | null;
      /**
       * Source
       * @default local
       */
      source?: string;
      /**
       * Originfilename
       * @description The original file name given when uploading the file
       */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /**
       * Contenttype
       * @description File contents in MIME format
       */
      contentType?: string | null;
      /**
       * Url
       * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
       */
      url?: string | null;
      /**
       * Thumb
       * @description Link to the preview file
       */
      thumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["FileStatus"] | null;
      /** Issuedate */
      issueDate?: string | null;
      /** Expiredate */
      expireDate?: string | null;
    };
    /** DeleteResponse */
    DeleteResponse: {
      /**
       * Status
       * @description Stretch status response
       * @default success
       */
      status?: string;
      /**
       * Deleted
       * @default 0
       */
      deleted?: number;
    };
    /** EquipmentFileOut */
    EquipmentFileOut: {
      /**
       * Contenttype
       * @description Content type of media file
       */
      contentType?: string | null;
      /**
       * Url
       * @description Full size url
       */
      url?: string | null;
      /**
       * Thumb
       * @description Thumbnail url
       */
      thumb?: string | null;
      /**
       * Videothumb
       * @description Video thumbnail url
       */
      videoThumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["FileStatus"] | null;
      /**
       * Duration
       * @description Duration of media
       */
      duration?: number | null;
      /**
       * Originfilename
       * @description Original media filename
       */
      originFilename?: string | null;
      /**
       * Filesize
       * @description Filesize of media
       */
      filesize?: number | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** EquipmentOut */
    EquipmentOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /**
       * Public
       * @default true
       */
      public?: boolean;
      /**
       * Servicescount
       * @default 0
       */
      servicesCount?: number;
      /**
       * Attachments
       * @default []
       */
      attachments?: components["schemas"]["EquipmentFileOut"][] | null;
    };
    /**
     * FileBase
     * @description For each file generated preview
     */
    FileOut: {
      /**
       * Id
       * @description UUID of file
       */
      id?: string | null;
      /**
       * Title
       * @description The title name of the uploaded file
       */
      title?: string | null;
      /**
       * Description
       * @description The description for uploaded file
       */
      description?: string | null;
      /**
       * Source
       * @default local
       */
      source?: string;
      /**
       * Originfilename
       * @description The original file name given when uploading the file
       */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /**
       * Contenttype
       * @description File contents in MIME format
       */
      contentType?: string | null;
      /**
       * Url
       * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
       */
      url?: string | null;
      /**
       * Thumb
       * @description Link to the preview file
       */
      thumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["FileStatus"] | null;
    };
    /**
     * FileStatus
     * @enum {string}
     */
    FileStatus: "uploaded" | "processing" | "approved" | "rejected" | "review" | "draft" | "deleted";
    /**
     * FileType
     * @enum {string}
     */
    FileType: "media" | "gallery" | "static" | "certificate" | "equipment" | "award" | "category" | "report";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * OrderIn
     * @description Order by IDs
     */
    OrderIn: {
      /**
       * Order
       * @description List of IDs in the required order
       * @default []
       */
      order?: string[];
    };
    /** ProfileFilling */
    ProfileFilling: {
      /**
       * Allownonverify
       * @default false
       */
      allowNonVerify?: boolean;
      /**
       * Availability
       * @default false
       */
      availability?: boolean;
      /**
       * Avatar
       * @default false
       */
      avatar?: boolean;
      /**
       * Description
       * @default false
       */
      description?: boolean;
      /**
       * Experience
       * @default false
       */
      experience?: boolean;
      /**
       * Images
       * @default false
       */
      images?: boolean;
      /**
       * Languages
       * @default false
       */
      languages?: boolean;
      /**
       * Locations
       * @default false
       */
      locations?: boolean;
      /**
       * Media
       * @default false
       */
      media?: boolean;
      /**
       * Services
       * @default false
       */
      services?: boolean;
      /** Allergy */
      allergy?: boolean | null;
      /**
       * Certificates
       * @default false
       */
      certificates?: boolean;
      /** Awards */
      awards?: boolean | null;
      /**
       * Percentage
       * @default 0
       */
      percentage?: number | null;
    };
    /** ReportAttachment */
    ReportAttachmentOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /**
       * Source
       * @default local
       */
      source?: string;
      /** Filename */
      filename: string;
      /** Origin Filename */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /**
       * Content Type
       * @default application/pdf
       */
      contentType?: (string | null) | null;
      /** Url */
      url?: string | null;
      /** @default review */
      status?: components["schemas"]["FileStatus"];
    };
    /** StretchResponse */
    StretchResponse: {
      /**
       * Status
       * @description Stretch status response
       * @default success
       */
      status?: string;
    };
    /**
     * StripeConnectStatus
     * @enum {string}
     */
    StripeConnectStatus: "unregistered" | "completed" | "pending" | "unverified";
    /**
     * UserAllergy
     * @enum {string}
     */
    UserAllergy: "none" | "cat" | "dog" | "unknown" | "all";
    /**
     * UserGender
     * @enum {string}
     */
    UserGender: "male" | "female" | "other";
    /** UserProfileOut */
    UserProfileOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Displayname
       * @description User display name
       * @example Smith
       */
      displayName?: string | null;
      /** Firstname */
      firstName: string;
      /** Lastname */
      lastName: string;
      /** Avatarurl */
      avatarUrl?: string | null;
      type: components["schemas"]["UserType"];
      /**
       * Isdeleted
       * @default false
       */
      isDeleted?: boolean;
      /** @description User allergy */
      allergy?: components["schemas"]["UserAllergy"] | null;
      /** Rating */
      rating?: number | null;
      /**
       * Reviewscount
       * @description Number of reviews
       * @default 0
       */
      reviewsCount?: number | null;
      /** Sessionscount */
      sessionsCount?: number | null;
      /**
       * Registrationdate
       * @description User registration date
       */
      registrationDate?: string | null;
      /** Verified */
      verified?: boolean | null;
      /**
       * Experience
       * @description User experience
       */
      experience?: number | null;
      /** Allownonverify */
      allowNonVerify?: boolean | null;
      /**
       * @description User gender
       * @example male
       */
      gender?: components["schemas"]["UserGender"] | null;
      /**
       * Avatartype
       * @description Avatar type of banner picture
       */
      avatarType?: string | null;
      /** Avatarimageurl */
      avatarImageUrl?: string | null;
      /** Mediatype */
      mediaType?: string | null;
      /** Mediaurl */
      mediaUrl?: string | null;
      /** Mediapreviewurl */
      mediaPreviewUrl?: string | null;
      /**
       * Description
       * @description About
       */
      description?: string | null;
      /**
       * Languages
       * @description Languages
       */
      languages: string | {
        [key: string]: string;
      } | null;
      /**
       * Properties
       * @description Extra property for user
       */
      properties?: components["schemas"]["UserPropOut"][] | null;
      /**
       * Phone
       * @description Phone number in international format
       * @example +97100000000
       */
      phone?: string | null;
      /**
       * Whatsapp
       * @description Whatsapp  number in international format
       * @example +97100000000
       */
      whatsapp?: string | null;
      /** @description KYC verification */
      kycStatus?: components["schemas"]["StripeConnectStatus"] | null;
      /** Chaturl */
      chatUrl?: string | null;
      /**
       * Disabled
       * @default false
       */
      disabled?: boolean;
      /** Recoverydeadline */
      recoveryDeadline?: string | null;
      /**
       * Blockedyou
       * @default false
       */
      blockedYou?: boolean;
      /**
       * Blockedbyyou
       * @default false
       */
      blockedByYou?: boolean;
      /**
       * Reportedbyyou
       * @default false
       */
      reportedByYou?: boolean;
      /**
       * Username
       * @description Username input
       */
      username?: string | null;
      /**
       * Email
       * @description Email format
       * @example info@stretch.com
       */
      email?: string | null;
      /**
       * Timezone
       * @description Default timezone for user
       * @example Asia/Dubai
       */
      timezone?: string | null;
      /**
       * Birthdate
       * @description User Birth date
       * @example 2000-07-08
       */
      birthDate?: string | null;
      /** @description User balance */
      balance?: components["schemas"]["BalanceOut"] | null;
      /**
       * Verifiedphone
       * @description Phone verification
       */
      verifiedPhone?: boolean | null;
      /**
       * Verifiedemail
       * @description Email verification
       */
      verifiedEmail?: boolean | null;
      /**
       * Available
       * @description Availability
       */
      available?: boolean | null;
      /** Verifycode */
      verifyCode?: string | null;
      /**
       * Istemporary
       * @default false
       */
      isTemporary?: boolean;
      /**
       * Totalpayment
       * @description Total payment amount
       */
      totalPayment?: number | null;
      /**
       * Totalpaymentcurrency
       * @description Payment currency
       */
      totalPaymentCurrency?: string | null;
      /**
       * Publicviewallowed
       * @description client only, allow clients to view profile?
       * @example false
       */
      publicViewAllowed?: boolean | null;
      /** @description Profile picture completion status */
      profileCompletion?: components["schemas"]["ProfileFilling"] | null;
      /**
       * Sbaccesstoken
       * @description Access token for sendbird registration
       */
      sbAccessToken?: string | null;
    };
    /** UserPropOut */
    UserPropOut: {
      /** Name */
      name: string;
      /** Value */
      value?: string | number | boolean | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Type */
      type: string | null;
      /** Options */
      options?: {
        [key: string]: string;
      } | null;
    };
    /**
     * UserType
     * @enum {string}
     */
    UserType: "guest" | "coach" | "client" | "studio" | "business" | "support" | "admin";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** FileBase */
    VideoFileOut: {
      /**
       * Id
       * @description UUID of file
       */
      id?: string | null;
      /**
       * Title
       * @description The title name of the uploaded file
       */
      title?: string | null;
      /**
       * Description
       * @description The description for uploaded file
       */
      description?: string | null;
      /**
       * Source
       * @default local
       */
      source?: string;
      /**
       * Originfilename
       * @description The original file name given when uploading the file
       */
      originFilename?: string | null;
      /** Filesize */
      filesize?: number | null;
      /**
       * Contenttype
       * @description File contents in MIME format
       */
      contentType?: string | null;
      /**
       * Url
       * @description Direct link to the downloaded file. The file can be recompressed when it is placed in the storage
       */
      url?: string | null;
      /**
       * Thumb
       * @description Link to the preview file
       */
      thumb?: string | null;
      /** @description File visibility status in the system: on review, approved or rejected */
      status?: components["schemas"]["FileStatus"] | null;
      /**
       * Duration
       * @description Duration in seconds
       */
      duration?: number | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List Attachment */
  list_attachment_api_v1_storage_attachments_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentFileOut"][];
        };
      };
    };
  };
  /** Post Upload Attachment */
  post_upload_attachment_api_v1_storage_attachment_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_post_upload_attachment_api_v1_storage_attachment_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AttachmentFileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Attachment */
  delete_attachment_api_v1_storage_attachment__attachment_id__delete: {
    parameters: {
      path: {
        attachment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Save User Avatar
   * @deprecated
   * @description Retrieves original avatar file and stores the original avatar url in user properties
   */
  save_user_avatar_api_v1_storage_profile_avatar_get: {
    parameters: {
      query: {
        userId: string;
        baseConsumerId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload User Avatar
   * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
   */
  upload_user_avatar_api_v1_storage_profile_avatar_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_user_avatar_api_v1_storage_profile_avatar_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User Avatar
   * @description Delete avatar image
   * to complete this process.
   */
  delete_user_avatar_api_v1_storage_profile_avatar_delete: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Upload User Media
   * @description Uploads the media as requested by the user and display it on their profile page.
   * Media could either be a video or a picture format.
   */
  upload_user_media_api_v1_storage_profile_media_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_user_media_api_v1_storage_profile_media_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserProfileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Image
   * @deprecated
   * @description Uploading a file to the user's gallery
   * The maximum file size is 20 MB and acceptable file types are:
   *
   * - png
   * - jpg
   */
  upload_image_api_v1_storage_image_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image_api_v1_storage_image_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Images
   * @deprecated
   * @description List of uploaded images from the user's gallery
   */
  list_images_api_v1_storage_images_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FileOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Images
   * @deprecated
   * @description Uploading a files to the user's gallery. This working like upload file but  on many images.
   * The maximum file size is 20 MB and acceptable file types are:
   *
   * - png
   * - jpg
   */
  upload_images_api_v1_storage_images_post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_upload_images_api_v1_storage_images_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FileOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Set Images Order
   * @deprecated
   * @description Changes the order of files in the user's gallery.
   *
   * The list must contain the ID of all available files,
   * obtained using the [GET] List Images request.
   */
  set_images_order_api_v1_storage_images_order_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrderIn"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Image
   * @deprecated
   */
  update_image_api_v1_storage_image__image_id__put: {
    parameters: {
      path: {
        image_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_update_image_api_v1_storage_image__image_id__put"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Image
   * @deprecated
   */
  delete_image_api_v1_storage_image__image_id__delete: {
    parameters: {
      path: {
        image_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Video
   * @deprecated
   * @description Uploads a video file and displays the preview as a separate media.
   */
  upload_video_api_v1_storage_video_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_video_api_v1_storage_video_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["VideoFileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Video
   * @deprecated
   * @description Lists out all the video preview made by the user.
   */
  list_video_api_v1_storage_videos_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VideoFileOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Set Videos Order
   * @deprecated
   */
  set_videos_order_api_v1_storage_videos_order_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrderIn"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Video
   * @deprecated
   * @description Replace the current video file with the new file that the user upload.
   */
  update_video_api_v1_storage_video__video_id__put: {
    parameters: {
      path: {
        video_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_update_video_api_v1_storage_video__video_id__put"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VideoFileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Video
   * @deprecated
   * @description Removes the current video file specified and returns the status of removal.
   */
  delete_video_api_v1_storage_video__video_id__delete: {
    parameters: {
      path: {
        video_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Certificate
   * @deprecated
   * @description Upload the image only related to coach's certificate as a proof of fitness experience.
   */
  upload_certificate_api_v1_storage_certificate_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_certificate_api_v1_storage_certificate_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CertificateFileOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Certificates
   * @deprecated
   * @description List all the certificates uploaded by the coach
   */
  list_certificates_api_v1_storage_certificates_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CertificateFileOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Certificate
   * @deprecated
   * @description Update the certificate by adding the newly inserted image and replacing the previous image file simultaneously.
   */
  update_certificate_api_v1_storage_certificate__certificate_id__put: {
    parameters: {
      path: {
        certificate_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_update_certificate_api_v1_storage_certificate__certificate_id__put"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Certificate
   * @deprecated
   * @description Delete the certificate using the certificate id and coach's authentication is required in order
   * to complete this process.
   */
  delete_certificate_api_v1_storage_certificate__certificate_id__delete: {
    parameters: {
      path: {
        certificate_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Set Certificates Order
   * @deprecated
   * @description Changes the order of files in the user's certificates.
   *
   * The list must contain the ID of all available files,
   * obtained using the [GET] List Images request.
   */
  set_certificates_order_api_v1_storage_certificates_order_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrderIn"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Report Attachment
   * @deprecated
   */
  get_report_attachment_api_v1_storage_report__report_id__get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
      };
      path: {
        report_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReportAttachmentOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Report
   * @deprecated
   */
  upload_report_api_v1_storage_report__report_id__post: {
    parameters: {
      path: {
        report_id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_report_api_v1_storage_report__report_id__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ReportAttachmentOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Report Attachment File
   * @deprecated
   */
  delete_report_attachment_file_api_v1_storage_report__report_id__file__file_id__delete: {
    parameters: {
      path: {
        report_id: string;
        file_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Category Cover
   * @deprecated
   * @description Upload the image file matching the user's avatar that will display upon reaching their profile page.
   */
  upload_category_cover_api_v1_storage_category__category_id__post: {
    parameters: {
      path: {
        category_id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_category_cover_api_v1_storage_category__category_id__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CategoryOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Category Cover
   * @deprecated
   * @description Delete avatar image
   * to complete this process.
   */
  delete_category_cover_api_v1_storage_category__category_id__delete: {
    parameters: {
      path: {
        category_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Equipments
   * @deprecated
   */
  get_all_equipments_api_v1_storage_equipments_get: {
    parameters: {
      query?: {
        page?: number | null;
        limit?: number | null;
        search?: string | null;
        category?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Equipment
   * @deprecated
   */
  create_equipment_api_v1_storage_equipment_post: {
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_create_equipment_api_v1_storage_equipment_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Equipment
   * @deprecated
   */
  update_equipment_api_v1_storage_equipment__equipment_id__put: {
    parameters: {
      path: {
        equipment_id: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["Body_update_equipment_api_v1_storage_equipment__equipment_id__put"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Equipment
   * @deprecated
   */
  delete_equipment_api_v1_storage_equipment__equipment_id__delete: {
    parameters: {
      path: {
        equipment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Equipment File
   * @deprecated
   */
  delete_equipment_file_api_v1_storage_equipment__equipment_id__file__file_id__delete: {
    parameters: {
      path: {
        equipment_id: string;
        file_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StretchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
